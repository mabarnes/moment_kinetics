module FokkerPlanckTimeEvolutionTests
include("setup.jl")

export print_output_data_for_test_update

using Base.Filesystem: tempname
using MPI
using Printf
using moment_kinetics.load_data: open_readonly_output_file, load_coordinate_data,
                                 load_species_data, load_fields_data,
                                 load_ion_moments_data, load_pdf_data,
                                 load_time_data, load_species_data,
                                 load_input
using moment_kinetics.type_definitions: mk_float
using moment_kinetics.utils: merge_dict_with_kwargs!
using moment_kinetics.input_structs: options_to_TOML
using moment_kinetics.velocity_moments: get_density, get_upar, get_p

const analytical_rtol = 3.e-2
const regression_rtol = 2.e-8

# Create a temporary directory for test output
test_output_directory = tempname()
mkpath(test_output_directory)

# The expected output
struct expected_data
    vpa::Array{mk_float, 1}
    vperp::Array{mk_float, 1}
    phi::Array{mk_float, 1} #time
    n_ion::Array{mk_float, 1} #time
    upar_ion::Array{mk_float, 1} # time
    ppar_ion::Array{mk_float, 1} # time
    pperp_ion::Array{mk_float, 1} # time
    qpar_ion::Array{mk_float, 1} # time
    v_t_ion::Array{mk_float, 1} # time
    dSdt::Array{mk_float, 1} # time
    maxnorm_ion::Array{mk_float, 1} # time
    L2norm_ion::Array{mk_float, 1} # time
    f_ion::Array{mk_float, 3} # vpa, vperp, time
end

const expected_zero_direct_integration =
expected_data(
    # Expected vpa
    [-4.242640687119286, -3.535533905932738, -2.828427124746191, -2.121320343559643, -1.414213562373095, -0.707106781186548, 0.000000000000000, 0.707106781186547, 1.414213562373095, 2.121320343559643, 2.828427124746191, 3.535533905932738, 4.242640687119286],
    # Expected vperp
    [0.219275263435463, 0.912095586463014, 1.414213562373095, 2.121320343559643, 2.828427124746190, 3.535533905932738, 4.242640687119286],
    # Expected phi
    [-0.000000065347220, -0.000000065347491],
    # Expected n_ion
    [0.999999934652782, 0.999999934652511],
    # Expected upar_ion
    [0.179871043200945, 0.179871043200945],
    # Expected ppar_ion
    [0.307487372897612, 1.060914120880783],
    # Expected pperp_ion
    [1.438641808677253, 1.061928434685236],
    # Expected qpar_ion
    [-0.026637866209867, -0.006019324624199],
    # Expected v_t_ion
    [1.457113859282121, 1.457113859282121],
    # Expected dSdt_ion
    [0.000000000000000, -0.000000000002101],
    # Expected maxnorm_ion
    [0.051952900920716, 0.006670149110543],
    # Expected L2norm_ion
    [0.005794676843594, 0.000479433451777],
    # Expected f_ion
    [0.000000000000000 0.000000000000000 0.000000000000000 0.000000000000000 0.000000000000000 0.000000000000000 0.000000000000000 ;
    0.000000000000008 0.000000000000084 0.000000000000140 0.000000000000051 0.000000000000003 0.000000000000000 0.000000000000000 ;
    0.000000000097012 0.000000001018760 0.000000001686796 0.000000000620538 0.000000000030895 0.000000000000208 0.000000000000000 ;
    0.000000158709589 0.000001666675496 0.000002759572688 0.000001015190058 0.000000050543337 0.000000000340558 0.000000000000000 ;
    0.000035139321288 0.000369012648462 0.000610987099129 0.000224769592590 0.000011190619073 0.000000075401798 0.000000000000000 ;
    0.001052918138669 0.011057131917284 0.018307678565963 0.006735018559993 0.000335316829505 0.000002259347025 0.000000000000000 ;
    0.004269793601022 0.044838880984366 0.074241297513697 0.027311847041181 0.001359776795892 0.000009162103981 0.000000000000000 ;
    0.002343312411961 0.024608099633655 0.040744487954235 0.014989059459421 0.000746261328076 0.000005028269276 0.000000000000000 ;
    0.000174046197710 0.001827731612846 0.003026238912872 0.001113291080119 0.000055427499119 0.000000373467551 0.000000000000000 ;
    0.000001749483791 0.000018372057958 0.000030419256476 0.000011190619073 0.000000557148117 0.000000003754034 0.000000000000000 ;
    0.000000002379942 0.000000024992760 0.000000041381384 0.000000015223361 0.000000000757926 0.000000000005107 0.000000000000000 ;
    0.000000000000438 0.000000000004601 0.000000000007619 0.000000000002803 0.000000000000140 0.000000000000001 0.000000000000000 ;
    0.000000000000000 0.000000000000000 0.000000000000000 0.000000000000000 0.000000000000000 0.000000000000000 0.000000000000000 ;;;
    0.000000000000000 0.000000000000000 0.000000000000000 0.000000000000000 0.000000000000000 0.000000000000000 0.000000000000000 ;
    0.000022682383894 -0.000012069228039 -0.000042087451890 -0.000052177158029 -0.000033278520314 -0.000012323530133 0.000000000000000 ;
    0.001167374795565 0.000830831321808 0.000478582010213 0.000118409202504 -0.000022320845550 -0.000032216065892 0.000000000000000 ;
    0.005174834635794 0.003685654550812 0.002163567983531 0.000686248554637 0.000091175250277 -0.000064059917374 0.000000000000000 ;
    0.016995956340554 0.012208277867578 0.007276785457665 0.002455114779085 0.000504343176969 -0.000068820354366 0.000000000000000 ;
    0.036139570002070 0.026154033409044 0.015794518387983 0.005471920831071 0.001222559474954 -0.000014372354563 0.000000000000000 ;
    0.049220834164334 0.035675293249321 0.021606356026856 0.007529887669620 0.001711373530618 0.000033881052548 0.000000000000000 ;
    0.044471019003181 0.032197325959093 0.019462570196231 0.006758788636319 0.001527169896395 0.000012175447506 0.000000000000000 ;
    0.026588906246464 0.019159260061723 0.011486159496144 0.003927954188608 0.000851659230049 -0.000051603507237 0.000000000000000 ;
    0.010412151158576 0.007466809641822 0.004436691021042 0.001467137607337 0.000262743007346 -0.000073938048545 0.000000000000000 ;
    0.002502225341864 0.001766894009317 0.001011314907889 0.000274424545695 -0.000006909240716 -0.000051438399032 0.000000000000000 ;
    0.000180355650200 0.000084661893294 -0.000002304366279 -0.000055753385139 -0.000044737711393 -0.000020371837103 0.000000000000000 ;
    0.000000000000000 0.000000000000000 0.000000000000000 0.000000000000000 0.000000000000000 0.000000000000000 0.000000000000000 ])
const expected_zero_multipole_expansion =
expected_data(
    # Expected vpa
    [-4.242640687119286, -3.535533905932738, -2.828427124746191, -2.121320343559643, -1.414213562373095, -0.707106781186548, 0.000000000000000, 0.707106781186547, 1.414213562373095, 2.121320343559643, 2.828427124746191, 3.535533905932738, 4.242640687119286],
    # Expected vperp
    [0.219275263435463, 0.912095586463014, 1.414213562373095, 2.121320343559643, 2.828427124746190, 3.535533905932738, 4.242640687119286],
    # Expected phi
    [-0.000000065347220, -0.000000065347483],
    # Expected n_ion
    [0.999999934652782, 0.999999934652519],
    # Expected upar_ion
    [0.179871043200945, 0.179871043200954],
    # Expected ppar_ion
    [0.307487372897612, 1.061557835395796],
    # Expected pperp_ion
    [1.438641808677253, 1.061606577427752],
    # Expected qpar_ion
    [-0.026637866209867, -0.006648097823645],
    # Expected v_t_ion
    [1.457113859282121, 1.457113859282126],
    # Expected dSdt_ion
    [0.000000000000000, -0.000000000001787],
    # Expected maxnorm_ion
    [0.051952900920716, 0.006531979111355],
    # Expected L2norm_ion
    [0.005794676843594, 0.000468330305651],
    # Expected f_ion
    [0.000000000000000 0.000000000000000 0.000000000000000 0.000000000000000 0.000000000000000 0.000000000000000 0.000000000000000 ;
    0.000000000000008 0.000000000000084 0.000000000000140 0.000000000000051 0.000000000000003 0.000000000000000 0.000000000000000 ;
    0.000000000097012 0.000000001018760 0.000000001686796 0.000000000620538 0.000000000030895 0.000000000000208 0.000000000000000 ;
    0.000000158709589 0.000001666675496 0.000002759572688 0.000001015190058 0.000000050543337 0.000000000340558 0.000000000000000 ;
    0.000035139321288 0.000369012648462 0.000610987099129 0.000224769592590 0.000011190619073 0.000000075401798 0.000000000000000 ;
    0.001052918138669 0.011057131917284 0.018307678565963 0.006735018559993 0.000335316829505 0.000002259347025 0.000000000000000 ;
    0.004269793601022 0.044838880984366 0.074241297513697 0.027311847041181 0.001359776795892 0.000009162103981 0.000000000000000 ;
    0.002343312411961 0.024608099633655 0.040744487954235 0.014989059459421 0.000746261328076 0.000005028269276 0.000000000000000 ;
    0.000174046197710 0.001827731612846 0.003026238912872 0.001113291080119 0.000055427499119 0.000000373467551 0.000000000000000 ;
    0.000001749483791 0.000018372057958 0.000030419256476 0.000011190619073 0.000000557148117 0.000000003754034 0.000000000000000 ;
    0.000000002379942 0.000000024992760 0.000000041381384 0.000000015223361 0.000000000757926 0.000000000005107 0.000000000000000 ;
    0.000000000000438 0.000000000004601 0.000000000007619 0.000000000002803 0.000000000000140 0.000000000000001 0.000000000000000 ;
    0.000000000000000 0.000000000000000 0.000000000000000 0.000000000000000 0.000000000000000 0.000000000000000 0.000000000000000 ;;;
    0.000000000000000 0.000000000000000 0.000000000000000 0.000000000000000 0.000000000000000 0.000000000000000 0.000000000000000 ;
    0.000024790053022 -0.000009996831667 -0.000040085728971 -0.000050515421156 -0.000032264864999 -0.000011979782153 0.000000000000000 ;
    0.001165814115039 0.000830061193673 0.000478846489738 0.000119994958120 -0.000020420019936 -0.000031218205934 0.000000000000000 ;
    0.005164227348503 0.003675353765301 0.002155226365167 0.000683359862487 0.000092768384066 -0.000062314687059 0.000000000000000 ;
    0.017003956546499 0.012203310928101 0.007263442170283 0.002444701762621 0.000503708643972 -0.000066718305237 0.000000000000000 ;
    0.036217620959052 0.026187445629214 0.015791696801110 0.005455310550025 0.001218248518889 -0.000012537527403 0.000000000000000 ;
    0.049359004163522 0.035743682029844 0.021615982766064 0.007510806113774 0.001704707064545 0.000035352785909 0.000000000000000 ;
    0.044588078602996 0.032253340458338 0.019467695859847 0.006740597459404 0.001521428855958 0.000013732009982 0.000000000000000 ;
    0.026630659044837 0.019172248242826 0.011477105180797 0.003914160554819 0.000849266631623 -0.000049644246953 0.000000000000000 ;
    0.010408937869083 0.007458493171577 0.004426133944833 0.001461052427615 0.000263408388433 -0.000072016027468 0.000000000000000 ;
    0.002498380465355 0.001763700004489 0.001009401359997 0.000274917169286 -0.000004961484650 -0.000050148286334 0.000000000000000 ;
    0.000181673365133 0.000086139977043 -0.000000650575518 -0.000054091687981 -0.000043527173279 -0.000019889930470 0.000000000000000 ;
    0.000000000000000 0.000000000000000 0.000000000000000 0.000000000000000 0.000000000000000 0.000000000000000 0.000000000000000 ])
const expected_zero_delta_f_multipole =
expected_data(
    # Expected vpa
    [-4.242640687119286, -3.535533905932738, -2.828427124746191, -2.121320343559643, -1.414213562373095, -0.707106781186548, 0.000000000000000, 0.707106781186547, 1.414213562373095, 2.121320343559643, 2.828427124746191, 3.535533905932738, 4.242640687119286],
    # Expected vperp
    [0.219275263435463, 0.912095586463014, 1.414213562373095, 2.121320343559643, 2.828427124746190, 3.535533905932738, 4.242640687119286],
    # Expected phi
    [-0.000000065347220, -0.000000065347489],
    # Expected n_ion
    [0.999999934652782, 0.999999934652513],
    # Expected upar_ion
    [0.179871043200945, 0.179871043200957],
    # Expected ppar_ion
    [0.307487372897612, 1.061963821562742],
    # Expected pperp_ion
    [1.438641808677253, 1.061403584344270],
    # Expected qpar_ion
    [-0.026637866209867, -0.007593873648896],
    # Expected v_t_ion
    [1.457113859282121, 1.457113859282126],
    # Expected dSdt_ion
    [0.000000000000000, -0.000000000001038],
    # Expected maxnorm_ion
    [0.051952900920716, 0.006444343171682],
    # Expected L2norm_ion
    [0.005794676843594, 0.000460869437579],
    # Expected f_ion
    [0.000000000000000 0.000000000000000 0.000000000000000 0.000000000000000 0.000000000000000 0.000000000000000 0.000000000000000 ;
    0.000000000000008 0.000000000000084 0.000000000000140 0.000000000000051 0.000000000000003 0.000000000000000 0.000000000000000 ;
    0.000000000097012 0.000000001018760 0.000000001686796 0.000000000620538 0.000000000030895 0.000000000000208 0.000000000000000 ;
    0.000000158709589 0.000001666675496 0.000002759572688 0.000001015190058 0.000000050543337 0.000000000340558 0.000000000000000 ;
    0.000035139321288 0.000369012648462 0.000610987099129 0.000224769592590 0.000011190619073 0.000000075401798 0.000000000000000 ;
    0.001052918138669 0.011057131917284 0.018307678565963 0.006735018559993 0.000335316829505 0.000002259347025 0.000000000000000 ;
    0.004269793601022 0.044838880984366 0.074241297513697 0.027311847041181 0.001359776795892 0.000009162103981 0.000000000000000 ;
    0.002343312411961 0.024608099633655 0.040744487954235 0.014989059459421 0.000746261328076 0.000005028269276 0.000000000000000 ;
    0.000174046197710 0.001827731612846 0.003026238912872 0.001113291080119 0.000055427499119 0.000000373467551 0.000000000000000 ;
    0.000001749483791 0.000018372057958 0.000030419256476 0.000011190619073 0.000000557148117 0.000000003754034 0.000000000000000 ;
    0.000000002379942 0.000000024992760 0.000000041381384 0.000000015223361 0.000000000757926 0.000000000005107 0.000000000000000 ;
    0.000000000000438 0.000000000004601 0.000000000007619 0.000000000002803 0.000000000000140 0.000000000000001 0.000000000000000 ;
    0.000000000000000 0.000000000000000 0.000000000000000 0.000000000000000 0.000000000000000 0.000000000000000 0.000000000000000 ;;;
    0.000000000000000 0.000000000000000 0.000000000000000 0.000000000000000 0.000000000000000 0.000000000000000 0.000000000000000 ;
    0.000025334704120 -0.000008934916454 -0.000038537081618 -0.000048751872147 -0.000030997207720 -0.000011501487444 0.000000000000000 ;
    0.001161264371627 0.000827152785584 0.000477848125432 0.000121281100447 -0.000018329117040 -0.000030040595845 0.000000000000000 ;
    0.005151963422044 0.003664984196265 0.002147719895271 0.000680782794530 0.000094021782038 -0.000060690513428 0.000000000000000 ;
    0.017003447296887 0.012197120800571 0.007253862157650 0.002437233360412 0.000502511114191 -0.000065346507950 0.000000000000000 ;
    0.036263200196700 0.026208284526309 0.015791770000501 0.005445067704738 0.001213998716920 -0.000012020797958 0.000000000000000 ;
    0.049446640103195 0.035790747011694 0.021627536313922 0.007500627789405 0.001698890618671 0.000035309222026 0.000000000000000 ;
    0.044665159438209 0.032294374613856 0.019477309503056 0.006731296485786 0.001516459978913 0.000013972562970 0.000000000000000 ;
    0.026657349301991 0.019182651141464 0.011474339342969 0.003906169644906 0.000846856282889 -0.000048598824064 0.000000000000000 ;
    0.010402378632123 0.007450534846733 0.004418244904303 0.001456619479783 0.000263675227250 -0.000070489619855 0.000000000000000 ;
    0.002490495937536 0.001757856406625 0.001006046982901 0.000274876101630 -0.000003177629008 -0.000048845879402 0.000000000000000 ;
    0.000179835019001 0.000085355565642 -0.000000342974473 -0.000052799459614 -0.000042257161661 -0.000019314616442 0.000000000000000 ;
    0.000000000000000 0.000000000000000 0.000000000000000 0.000000000000000 0.000000000000000 0.000000000000000 0.000000000000000 ])
const expected_none_bc_direct_integration =
expected_data(
    # Expected vpa
    [-4.242640687119286, -3.535533905932738, -2.828427124746191, -2.121320343559643, -1.414213562373095, -0.707106781186548, 0.000000000000000, 0.707106781186547, 1.414213562373095, 2.121320343559643, 2.828427124746191, 3.535533905932738, 4.242640687119286],
    # Expected vperp
    [0.219275263435463, 0.912095586463014, 1.414213562373095, 2.121320343559643, 2.828427124746190, 3.535533905932738, 4.242640687119286],
    # Expected phi
    [0.000000000000000, -0.000000000000262],
    # Expected n_ion
    [1.000000000000000, 0.999999999999738],
    # Expected upar_ion
    [0.179871043200947, 0.179871043200949],
    # Expected ppar_ion
    [0.307487392991066, 1.047402399589697],
    # Expected pperp_ion
    [1.438642396802213, 1.068684893502468],
    # Expected qpar_ion
    [-0.026637867950563, -0.003531380633215],
    # Expected v_t_ion
    [1.457114085351702, 1.457114085351697],
    # Expected dSdt_ion
    [0.000000000000000, 0.000000000000008],
    # Expected maxnorm_ion
    [0.051952903218111, 0.000733338446164],
    # Expected L2norm_ion
    [0.005794676226031, 0.000109491299175],
    # Expected f_ion
    [0.000000000000000 0.000000000000000 0.000000000000000 0.000000000000000 0.000000000000000 0.000000000000000 0.000000000000000 ;
    0.000000000000008 0.000000000000084 0.000000000000140 0.000000000000051 0.000000000000003 0.000000000000000 0.000000000000000 ;
    0.000000000097012 0.000000001018760 0.000000001686796 0.000000000620538 0.000000000030895 0.000000000000208 0.000000000000000 ;
    0.000000158709589 0.000001666675496 0.000002759572688 0.000001015190058 0.000000050543337 0.000000000340558 0.000000000000311 ;
    0.000035139321288 0.000369012648462 0.000610987099129 0.000224769592590 0.000011190619073 0.000000075401798 0.000000000068758 ;
    0.001052918138669 0.011057131917284 0.018307678565963 0.006735018559993 0.000335316829505 0.000002259347025 0.000000002060258 ;
    0.004269793601022 0.044838880984366 0.074241297513697 0.027311847041181 0.001359776795892 0.000009162103981 0.000000008354757 ;
    0.002343312411961 0.024608099633655 0.040744487954235 0.014989059459421 0.000746261328076 0.000005028269276 0.000000004585188 ;
    0.000174046197710 0.001827731612846 0.003026238912872 0.001113291080119 0.000055427499119 0.000000373467551 0.000000000340558 ;
    0.000001749483791 0.000018372057958 0.000030419256476 0.000011190619073 0.000000557148117 0.000000003754034 0.000000000003423 ;
    0.000000002379942 0.000000024992760 0.000000041381384 0.000000015223361 0.000000000757926 0.000000000005107 0.000000000000005 ;
    0.000000000000438 0.000000000004601 0.000000000007619 0.000000000002803 0.000000000000140 0.000000000000001 0.000000000000000 ;
    0.000000000000000 0.000000000000000 0.000000000000000 0.000000000000000 0.000000000000000 0.000000000000000 0.000000000000000 ;;;
    0.000070906529867 0.000059059973057 0.000045458947987 0.000024426430679 0.000009198383216 0.000002410506325 0.000000187664846 ;
    0.000054581043175 0.000032147948733 0.000012428674295 0.000002630301839 0.000004495641649 0.000003582355297 0.000001912228233 ;
    0.000987480744333 0.000707978292004 0.000422492037142 0.000141854970788 0.000033740330549 0.000008050187190 0.000008697103455 ;
    0.004374827064171 0.002996369690635 0.001653107822282 0.000491753398490 0.000118694960752 0.000005448465111 0.000028231114935 ;
    0.017007620845220 0.011761625586298 0.006569045337564 0.001958789747524 0.000443281585090 0.000014032327091 0.000060193000939 ;
    0.039809695449103 0.027816652865040 0.015822377320556 0.004835231322680 0.001051465174750 0.000058964166891 0.000092131077372 ;
    0.055935996909542 0.039168646470818 0.022373699185721 0.006883584273800 0.001480204551881 0.000097408253389 0.000110100857327 ;
    0.049793414626124 0.034825120875587 0.019849116213461 0.006089184212994 0.001319244947269 0.000082203614186 0.000104147097360 ;
    0.027843378251146 0.019357464630912 0.010918397513719 0.003308814731389 0.000738710605692 0.000033367424166 0.000077842914456 ;
    0.009638125278087 0.006674117678596 0.003743955851534 0.001132994807150 0.000260911360542 0.000009299799383 0.000042785134214 ;
    0.002064364001927 0.001437967354527 0.000815701551644 0.000250765137839 0.000057092929880 0.000007175308774 0.000016745163386 ;
    0.000177133915793 0.000112139607862 0.000053579378258 0.000014493075536 0.000008845830503 0.000005576100385 0.000004508494043 ;
    0.000139030609856 0.000110881505883 0.000079045217483 0.000037877450294 0.000013841002124 0.000003755979337 -0.000000057625524 ])
const expected_none_bc_multipole_expansion =
expected_data(
    # Expected vpa
    [-4.242640687119286, -3.535533905932738, -2.828427124746191, -2.121320343559643, -1.414213562373095, -0.707106781186548, 0.000000000000000, 0.707106781186547, 1.414213562373095, 2.121320343559643, 2.828427124746191, 3.535533905932738, 4.242640687119286],
    # Expected vperp
    [0.219275263435463, 0.912095586463014, 1.414213562373095, 2.121320343559643, 2.828427124746190, 3.535533905932738, 4.242640687119286],
    # Expected phi
    [0.000000000000000, -0.000000000000259],
    # Expected n_ion
    [1.000000000000000, 0.999999999999741],
    # Expected upar_ion
    [0.179871043200947, 0.179871043200951],
    # Expected ppar_ion
    [0.307487392991066, 1.052244070023526],
    # Expected pperp_ion
    [1.438642396802213, 1.066264058285555],
    # Expected qpar_ion
    [-0.026637867950563, -0.005438805975446],
    # Expected v_t_ion
    [1.457114085351702, 1.457114085351695],
    # Expected dSdt_ion
    [0.000000000000000, 0.000000000000007],
    # Expected maxnorm_ion
    [0.051952903218111, 0.000742667848468],
    # Expected L2norm_ion
    [0.005794676226031, 0.000111778670284],
    # Expected f_ion
    [0.000000000000000 0.000000000000000 0.000000000000000 0.000000000000000 0.000000000000000 0.000000000000000 0.000000000000000 ;
    0.000000000000008 0.000000000000084 0.000000000000140 0.000000000000051 0.000000000000003 0.000000000000000 0.000000000000000 ;
    0.000000000097012 0.000000001018760 0.000000001686796 0.000000000620538 0.000000000030895 0.000000000000208 0.000000000000000 ;
    0.000000158709589 0.000001666675496 0.000002759572688 0.000001015190058 0.000000050543337 0.000000000340558 0.000000000000311 ;
    0.000035139321288 0.000369012648462 0.000610987099129 0.000224769592590 0.000011190619073 0.000000075401798 0.000000000068758 ;
    0.001052918138669 0.011057131917284 0.018307678565963 0.006735018559993 0.000335316829505 0.000002259347025 0.000000002060258 ;
    0.004269793601022 0.044838880984366 0.074241297513697 0.027311847041181 0.001359776795892 0.000009162103981 0.000000008354757 ;
    0.002343312411961 0.024608099633655 0.040744487954235 0.014989059459421 0.000746261328076 0.000005028269276 0.000000004585188 ;
    0.000174046197710 0.001827731612846 0.003026238912872 0.001113291080119 0.000055427499119 0.000000373467551 0.000000000340558 ;
    0.000001749483791 0.000018372057958 0.000030419256476 0.000011190619073 0.000000557148117 0.000000003754034 0.000000000003423 ;
    0.000000002379942 0.000000024992760 0.000000041381384 0.000000015223361 0.000000000757926 0.000000000005107 0.000000000000005 ;
    0.000000000000438 0.000000000004601 0.000000000007619 0.000000000002803 0.000000000000140 0.000000000000001 0.000000000000000 ;
    0.000000000000000 0.000000000000000 0.000000000000000 0.000000000000000 0.000000000000000 0.000000000000000 0.000000000000000 ;;;
    0.000069806604180 0.000057995316908 0.000044406234123 0.000023738941824 0.000009001839841 0.000002430210944 0.000000217064349 ;
    0.000061640606781 0.000037010877807 0.000015221396604 0.000003405284718 0.000004466385181 0.000003474461529 0.000001979270772 ;
    0.001004782790435 0.000718996261668 0.000427881872005 0.000143209857901 0.000033980898621 0.000007741547574 0.000008540595668 ;
    0.004436099021637 0.003035328258643 0.001672407437038 0.000497217997374 0.000121150612142 0.000005701209465 0.000027100490431 ;
    0.017089922011137 0.011803485392650 0.006579047852474 0.001956055737717 0.000445809105492 0.000016025840152 0.000057430667168 ;
    0.039881892408346 0.027825982267344 0.015789233605150 0.004804434608998 0.001048183391545 0.000062743697418 0.000087908268624 ;
    0.056032725411578 0.039174118317055 0.022317681792696 0.006832342570638 0.001471296196375 0.000101705247845 0.000105240018429 ;
    0.049942519818359 0.034870041825221 0.019817939229316 0.006045979604085 0.001311184690373 0.000085563710690 0.000099761184136 ;
    0.028004613094769 0.019433203879848 0.010926155840996 0.003290288135865 0.000735885508989 0.000035039388272 0.000074912774805 ;
    0.009743831935436 0.006732239867687 0.003762251176347 0.001130022553376 0.000260973152350 0.000009638046242 0.000041560769361 ;
    0.002101038011635 0.001458848684763 0.000823127864859 0.000250654279121 0.000057254396443 0.000007110487677 0.000016586958269 ;
    0.000185945458538 0.000117093088787 0.000055510939975 0.000014708720675 0.000008997891181 0.000005615142471 0.000004543463603 ;
    0.000138900467439 0.000110834473317 0.000078928371338 0.000037821780896 0.000013920412628 0.000003794466541 -0.000000178529358 ])
const expected_none_bc_delta_f_multipole =
expected_data(
    # Expected vpa
    [-4.242640687119286, -3.535533905932738, -2.828427124746191, -2.121320343559643, -1.414213562373095, -0.707106781186548, 0.000000000000000, 0.707106781186547, 1.414213562373095, 2.121320343559643, 2.828427124746191, 3.535533905932738, 4.242640687119286],
    # Expected vperp
    [0.219275263435463, 0.912095586463014, 1.414213562373095, 2.121320343559643, 2.828427124746190, 3.535533905932738, 4.242640687119286],
    # Expected phi
    [0.000000000000000, -0.000000000000259],
    # Expected n_ion
    [1.000000000000000, 0.999999999999741],
    # Expected upar_ion
    [0.179871043200947, 0.179871043200952],
    # Expected ppar_ion
    [0.307487392991066, 1.052242209354455],
    # Expected pperp_ion
    [1.438642396802213, 1.066264988620094],
    # Expected qpar_ion
    [-0.026637867950563, -0.005221125419898],
    # Expected v_t_ion
    [1.457114085351702, 1.457114085351697],
    # Expected dSdt_ion
    [0.000000000000000, 0.000000000000004],
    # Expected maxnorm_ion
    [0.051952903218111, 0.000729991082505],
    # Expected L2norm_ion
    [0.005794676226031, 0.000108542177369],
    # Expected f_ion
    [0.000000000000000 0.000000000000000 0.000000000000000 0.000000000000000 0.000000000000000 0.000000000000000 0.000000000000000 ;
    0.000000000000008 0.000000000000084 0.000000000000140 0.000000000000051 0.000000000000003 0.000000000000000 0.000000000000000 ;
    0.000000000097012 0.000000001018760 0.000000001686796 0.000000000620538 0.000000000030895 0.000000000000208 0.000000000000000 ;
    0.000000158709589 0.000001666675496 0.000002759572688 0.000001015190058 0.000000050543337 0.000000000340558 0.000000000000311 ;
    0.000035139321288 0.000369012648462 0.000610987099129 0.000224769592590 0.000011190619073 0.000000075401798 0.000000000068758 ;
    0.001052918138669 0.011057131917284 0.018307678565963 0.006735018559993 0.000335316829505 0.000002259347025 0.000000002060258 ;
    0.004269793601022 0.044838880984366 0.074241297513697 0.027311847041181 0.001359776795892 0.000009162103981 0.000000008354757 ;
    0.002343312411961 0.024608099633655 0.040744487954235 0.014989059459421 0.000746261328076 0.000005028269276 0.000000004585188 ;
    0.000174046197710 0.001827731612846 0.003026238912872 0.001113291080119 0.000055427499119 0.000000373467551 0.000000000340558 ;
    0.000001749483791 0.000018372057958 0.000030419256476 0.000011190619073 0.000000557148117 0.000000003754034 0.000000000003423 ;
    0.000000002379942 0.000000024992760 0.000000041381384 0.000000015223361 0.000000000757926 0.000000000005107 0.000000000000005 ;
    0.000000000000438 0.000000000004601 0.000000000007619 0.000000000002803 0.000000000000140 0.000000000000001 0.000000000000000 ;
    0.000000000000000 0.000000000000000 0.000000000000000 0.000000000000000 0.000000000000000 0.000000000000000 0.000000000000000 ;;;
    0.000069547389118 0.000057757723779 0.000044177852530 0.000023526372978 0.000008841294721 0.000002358692910 0.000000227385719 ;
    0.000060759992486 0.000036303022935 0.000014695333575 0.000003056679074 0.000004205103424 0.000003297303791 0.000001907859461 ;
    0.001003021168008 0.000717497664297 0.000426668740938 0.000142404659494 0.000033511222377 0.000007449135115 0.000008373169709 ;
    0.004443588057941 0.003041599913229 0.001676708851191 0.000498244749457 0.000120598689037 0.000005328961199 0.000026855450536 ;
    0.017094577112278 0.011811927826890 0.006588632788667 0.001960609394242 0.000445350847944 0.000015595548163 0.000057138882506 ;
    0.039847418339783 0.027813305501380 0.015792931628243 0.004810707559642 0.001047688027395 0.000062211695057 0.000087568328242 ;
    0.055961832870252 0.039140482099266 0.022313799032381 0.006838855455992 0.001470730023466 0.000101121040531 0.000104858204088 ;
    0.049885318317677 0.034844688056853 0.019817549881937 0.006052846585730 0.001310738098213 0.000085053307855 0.000099389342594 ;
    0.027990934971600 0.019432476381162 0.010934103033385 0.003296361669500 0.000735543138045 0.000034638842211 0.000074573115465 ;
    0.009748971582658 0.006738818623385 0.003768638257339 0.001132664946695 0.000260553325067 0.000009273058108 0.000041265936812 ;
    0.002101478372511 0.001459403859141 0.000823528569102 0.000250466637725 0.000056787716439 0.000006773144789 0.000016365767084 ;
    0.000185201547278 0.000116488674985 0.000055016677064 0.000014292983350 0.000008651620507 0.000005373578463 0.000004437952120 ;
    0.000138361162472 0.000110413937973 0.000078609842286 0.000037573639023 0.000013714243881 0.000003691064527 -0.000000161643291 ])
# dictionaries with expected data
const expected_zero = OptionsDict(
        "direct_integration" => expected_zero_direct_integration,
        "multipole_expansion" => expected_zero_multipole_expansion,
        "delta_f_multipole" => expected_zero_delta_f_multipole,
)
const expected_none_bc = OptionsDict(
        "direct_integration" => expected_none_bc_direct_integration,
        "multipole_expansion" => expected_none_bc_multipole_expansion,
        "delta_f_multipole" => expected_none_bc_delta_f_multipole,
)
###########################################################################################
# to modify the test, with a new expected f, print the new f using the following commands
# in an interative Julia REPL. The path is the path to the .dfns file. 
########################################################################################## 

function maxnorm_func(pdf,pdf_exact,pdf_err)
    @. pdf_err = abs(pdf - pdf_exact)
    norm = maximum(pdf_err)
    return norm
end

function L2norm_func(pdf,pdf_exact,pdf_err,vpa,vperp)
    @. pdf_err = (abs(pdf - pdf_exact))^2
    # compute the numerator
    num = get_density(pdf_err,vpa,vperp)
    # compute the denominator
    @. pdf_err = 1.0
    denom = get_density(pdf_err,vpa,vperp)
    L2norm = sqrt(num/denom)
    return L2norm
end

"""
Function to print data from a moment_kinetics run suitable
for copying into the expected data structure.
"""
function print_output_data_for_test_update(path; write_grid=true, write_pdf=true)
    fid = open_readonly_output_file(path, "dfns")
    input = load_input(fid)
    f_ion_vpavperpzrst = load_pdf_data(fid)
    f_ion = f_ion_vpavperpzrst[:,:,1,1,1,:]
    ntind = size(f_ion,3)
    nvperp = size(f_ion,2)
    nvpa = size(f_ion,1)
    vpa, vpa_spectral = load_coordinate_data(fid, "vpa"; ignore_MPI=true)
    vperp, vperp_spectral = load_coordinate_data(fid, "vperp"; ignore_MPI=true)
    # grid
    function print_grid(coord)
        println("# Expected "*coord.name)
        print("[")
        for k in 1:coord.n
            @printf("%.15f", coord.grid[k])
            if k < coord.n
                print(", ")
            end
        end
        print("],\n")
        return nothing
    end
    # pdf
    function print_pdf(pdf)
        println("# Expected f_ion")
        print("[")
        for k in 1:ntind
            for i in 1:nvpa-1
                for j in 1:nvperp-1
                    @printf("%.15f ", pdf[i,j,k])
                end
                @printf("%.15f ", pdf[i,nvperp,k])
                print(";\n")
            end
            for j in 1:nvperp-1
                @printf("%.15f ", pdf[nvpa,j,k])
            end
            @printf("%.15f ", pdf[nvpa,nvperp,k])
            if k < ntind
                print(";;;\n")
            end
        end
        print("]\n")
        return nothing
    end
    # a moment
    function print_moment(moment,moment_name)
        println("# Expected "*moment_name)
        print("[")
        for k in 1:ntind
            @printf("%.15f", moment[1,1,1,k])
            if k < ntind
                print(", ")
            end
        end
        print("],\n")
        return nothing
    end    
    # a field
    function print_field(field,field_name)
        println("# Expected "*field_name)
        print("[")
        for k in 1:ntind
            @printf("%.15f", field[1,1,k])
            if k < ntind
                print(", ")
            end
        end
        print("],\n")
        return nothing
    end
    # the norms
    function print_norms(pdf)
        L2norm_ion = copy(pdf[1,1,:])
        maxnorm_ion = copy(pdf[1,1,:])
        f_dummy_1 = copy(pdf[:,:,1])
        f_dummy_2 = copy(pdf[:,:,1])
        f_dummy_3 = copy(pdf[:,:,1])
        mass = input["ion_species_1"]["mass"]
        for it in 1:ntind
            @views output = diagnose_F_Maxwellian_serial(pdf[:,:,it],
                                                        f_dummy_1,f_dummy_2,
                                                        vpa,vperp,mass)
            maxnorm_ion[it] = output[1]
            L2norm_ion[it] = output[2]
        end
        println("# Expected maxnorm_ion")
        print("[")
        for k in 1:ntind
            @printf("%.15f", maxnorm_ion[k])
            if k < ntind
                print(", ")
            end
        end
        print("],\n")
        println("# Expected L2norm_ion")
        print("[")
        for k in 1:ntind
            @printf("%.15f", L2norm_ion[k])
            if k < ntind
                print(", ")
            end
        end
        print("],\n")
        return nothing
    end
    n_ion_zrst, upar_ion_zrst, p_ion_zrst, ppar_ion_zrst, pperp_ion_zrst, qpar_ion_zrst, v_t_ion_zrst, dSdt_zrst = load_ion_moments_data(fid,extended_moments=true)
    phi_zrt, Er_zrt, Ez_zrt = load_fields_data(fid)
    if write_grid
        print_grid(vpa)
        print_grid(vperp)
    end
    print_field(phi_zrt,"phi")
    print_moment(n_ion_zrst,"n_ion")
    print_moment(upar_ion_zrst,"upar_ion")
    print_moment(ppar_ion_zrst,"ppar_ion")
    print_moment(pperp_ion_zrst,"pperp_ion")
    print_moment(qpar_ion_zrst,"qpar_ion")
    print_moment(v_t_ion_zrst,"v_t_ion")
    print_moment(dSdt_zrst,"dSdt_ion")
    print_norms(f_ion)
    if write_pdf
        print_pdf(f_ion)
    end
    return nothing
end

function diagnose_F_Maxwellian_serial(pdf,pdf_exact,pdf_dummy_1,vpa,vperp,mass)
    # call this function from a single process
    # construct the local-in-time Maxwellian for this pdf
    dens = get_density(pdf,vpa,vperp)
    upar = get_upar(pdf, dens, vpa, vperp, false)
    pressure = get_p(pdf, dens, upar, vpa, vperp, false, false)
    vth = sqrt(2.0*pressure/(dens*mass))
    # a function for computing the Maxwellian distribution
    function F_Maxwellian(dens,upar,vth,vpa,vperp,ivpa,ivperp)
        v2 = ((vpa.grid[ivpa] - upar)^2 + vperp.grid[ivperp]^2)/(vth^2)
        F_M = (dens/(vth^3)/π^1.5)*exp(-v2)
        return F_M
    end

    for ivperp in 1:vperp.n
        for ivpa in 1:vpa.n
            pdf_exact[ivpa,ivperp] = F_Maxwellian(dens,upar,vth,vpa,vperp,ivpa,ivperp)
        end
    end
    # check how close the pdf is to the Maxwellian with
    # maximum of difference and L2 of difference
    max_err = maxnorm_func(pdf,pdf_exact,pdf_dummy_1)
    L2norm = L2norm_func(pdf,pdf_exact,pdf_dummy_1,vpa,vperp)
    return max_err, L2norm
end

# default inputs for tests
test_input_gauss_legendre = OptionsDict("output" => OptionsDict("run_name" => "gausslegendre_pseudospectral",
                                                                "base_directory" => test_output_directory),
                                        "composition" => OptionsDict("n_ion_species" => 1,
                                                                     "n_neutral_species" => 0,
                                                                     "electron_physics" => "boltzmann_electron_response",
                                                                     "T_e" => 1.0),
                                        "ion_species_1" => OptionsDict("initial_density" => 1.0,
                                                                       "initial_temperature" => 1.0,
                                                                       "mass" => 1.0),
                                        "z_IC_ion_species_1" => OptionsDict("initialization_option" => "sinusoid",
                                                                            "density_amplitude" => 0.0,
                                                                            "density_phase" => 0.0,
                                                                            "upar_amplitude" => 0.0,
                                                                            "upar_phase" => 0.0,
                                                                            "temperature_amplitude" => 0.0,
                                                                            "temperature_phase" => 0.0),
                                        "vpa_IC_ion_species_1" => OptionsDict("initialization_option" => "directed-beam",
                                                                              "vpa0" => sqrt(2) * 0.1,
                                                                              "vperp0" => sqrt(2) * 1.0,
                                                                              "vth0" => sqrt(2) * 0.5),
                                        "vpa" => OptionsDict("ngrid" => 3,
                                                             "L" => 8.485281374238571,
                                                             "nelement" => 6,
                                                             "bc" => "zero",
                                                             "discretization" => "gausslegendre_pseudospectral"),
                                        "vperp" => OptionsDict("ngrid" => 3,
                                                               "nelement" => 3,
                                                               "L" => 4.242640687119286,
                                                               "discretization" => "gausslegendre_pseudospectral"),
                                        "reactions" => OptionsDict("ionization_frequency" => 0.0,
                                                                   "charge_exchange_frequency" => 0.0),
                                        "fokker_planck_collisions" => OptionsDict("use_fokker_planck" => true,
                                                                                  "nuii" => 4.0,
                                                                                  "frequency_option" => "manual",
                                                                                  "boundary_data_option" => "direct_integration"),
                                        "evolve_moments" => OptionsDict("pressure" => false,
                                                                        "moments_conservation" => false,
                                                                        "parallel_flow" => false,
                                                                        "density" => false),
                                        "z" => OptionsDict("discretization" => "chebyshev_pseudospectral",
                                                           "ngrid" => 1,
                                                           "nelement_local" => 1,
                                                           "nelement" => 1,
                                                           "bc" => "wall"),
                                        "r" => OptionsDict("discretization" => "chebyshev_pseudospectral",
                                                           "ngrid" => 1,
                                                           "nelement" => 1,
                                                           "nelement_local" => 1),
                                        "timestepping" => OptionsDict("dt" => 0.0070710678118654745,
                                                                      "nstep" => 5000,
                                                                      "nwrite" => 5000,
                                                                      "nwrite_dfns" => 5000))

"""
Run a test for a single set of parameters
"""
# Note 'name' should not be shared by any two tests in this file
function run_test(test_input, expected, rtol, atol, upar_rtol=nothing; args...)
    # by passing keyword arguments to run_test, args becomes a Dict which can be used to
    # update the default inputs

    # Make a copy to make sure nothing modifies the input Dicts defined in this test
    # script.
    input = deepcopy(test_input)
    
    if upar_rtol === nothing
        upar_rtol = rtol
    end

    # Convert keyword arguments to a unique name
    function stringify_arg(key, value)
        if isa(value, AbstractDict)
            return string(string(key)[1], (stringify_arg(k, v) for (k, v) in value)...)
        else
            val = string(value)
            n = length(val)
            maxlength = 3
            if n < 3
                maxlength = n
            end
            return string(string(key)[1], string(value)[1:maxlength])
        end
    end
    name = input["output"]["run_name"]
    if length(args) > 0
        name = string(name[1], "_", (stringify_arg(k, v) for (k, v) in args)...)
    end

    # Provide some progress info
    println("    - testing ", name)

    # Update default inputs with values to be changed
    merge_dict_with_kwargs!(input; args...)
    input["output"]["run_name"] = name
    # Suppress console output while running
    quietoutput() do
        # run simulation
        run_moment_kinetics(input)
    end

    phi = nothing
    n_ion = nothing
    upar_ion = nothing
    ppar_ion = nothing
    pperp_ion = nothing
    qpar_ion = nothing
    v_t_ion = nothing
    dSdt = nothing
    maxnorm_ion = nothing
    L2norm_ion = nothing
    f_ion = nothing
    f_err = nothing
    vpa, vpa_spectral = nothing, nothing
    vperp, vperp_spectral = nothing, nothing

    if global_rank[] == 0
        quietoutput() do

            # Load and analyse output
            #########################

            path = joinpath(realpath(input["output"]["base_directory"]), name, name)
            print_output_data_for_test_update(path)
            # open the netcdf file containing moments data and give it the handle 'fid'
            fid = open_readonly_output_file(path, "moments")

            # load species, time coordinate data
            n_ion_species, n_neutral_species = load_species_data(fid)
            ntime, time = load_time_data(fid)
            n_ion_species, n_neutral_species = load_species_data(fid)
            
            # load fields data
            phi_zrt, Er_zrt, Ez_zrt = load_fields_data(fid)

            # load velocity moments data
            n_ion_zrst, upar_ion_zrst, p_ion_zrst,  ppar_ion_zrst,
            pperp_ion_zrst, qpar_ion_zrst, v_t_ion_zrst, dSdt_zrst = load_ion_moments_data(fid,extended_moments=true)
            
            close(fid)
            
            # open the netcdf file containing pdf data
            fid = open_readonly_output_file(path, "dfns")
            # load coordinates
            vpa, vpa_spectral = load_coordinate_data(fid, "vpa"; ignore_MPI=true)
            vperp, vperp_spectral = load_coordinate_data(fid, "vperp"; ignore_MPI=true)

            # load particle distribution function (pdf) data
            f_ion_vpavperpzrst = load_pdf_data(fid)
            
            close(fid)
            # select the single z, r, s point
            # keep the two time points in the arrays
            phi = phi_zrt[1,1,:]
            n_ion = n_ion_zrst[1,1,1,:]
            upar_ion = upar_ion_zrst[1,1,1,:]
            ppar_ion = ppar_ion_zrst[1,1,1,:]
            pperp_ion = pperp_ion_zrst[1,1,1,:]
            qpar_ion = qpar_ion_zrst[1,1,1,:]
            v_t_ion = v_t_ion_zrst[1,1,1,:]
            dSdt = dSdt_zrst[1,1,1,:]
            f_ion = f_ion_vpavperpzrst[:,:,1,1,1,:]
            f_err = copy(f_ion)
            f_dummy_1 = copy(f_ion[:,:,1])
            f_dummy_2 = copy(f_ion[:,:,1])
            f_dummy_3 = copy(f_ion[:,:,1])
            L2norm_ion = copy(phi)
            maxnorm_ion = copy(phi)
            mass = input["ion_species_1"]["mass"]
            for it in 1:size(phi,1)
                @views output = diagnose_F_Maxwellian_serial(f_ion[:,:,it],
                                                            f_dummy_1,f_dummy_2,
                                                            vpa,vperp,mass)
                maxnorm_ion[it] = output[1]
                L2norm_ion[it] = output[2]
            end
        end
        
        function test_values(tind)
            @testset "tind=$tind" begin
                # Check grids
                #############
                
                @test isapprox(expected.vpa[:], vpa.grid[:], atol=atol)
                @test isapprox(expected.vperp[:], vperp.grid[:], atol=atol)
            
                # Check electrostatic potential
                ###############################
                
                @test isapprox(expected.phi[tind], phi[tind], atol=atol)

                # Check ion particle moments and f
                ######################################

                @test isapprox(expected.n_ion[tind], n_ion[tind], atol=atol)
                @test isapprox(expected.upar_ion[tind], upar_ion[tind], atol=atol)
                @test isapprox(expected.ppar_ion[tind], ppar_ion[tind], atol=atol)
                @test isapprox(expected.pperp_ion[tind], pperp_ion[tind], atol=atol)
                @test isapprox(expected.qpar_ion[tind], qpar_ion[tind], atol=atol)
                @test isapprox(expected.v_t_ion[tind], v_t_ion[tind], atol=atol)
                @test isapprox(expected.dSdt[tind], dSdt[tind], atol=atol)
                @test isapprox(expected.maxnorm_ion[tind], maxnorm_ion[tind], atol=atol)
                @test isapprox(expected.L2norm_ion[tind], L2norm_ion[tind], atol=atol)                                
                @. f_err = abs(expected.f_ion[:,:,tind] - f_ion[:,:,tind])
                max_f_err = maximum(f_err)
                @test isapprox(max_f_err, 0.0, atol=atol)
                @test isapprox(expected.f_ion[:,:,tind], f_ion[:,:,tind], atol=atol)
            end
        end

        # Test initial values
        test_values(1)

        # Test final values
        test_values(2)
    end
end


function runtests()
    @testset "Fokker Planck dFdt = C[F,F] relaxation test" verbose=use_verbose begin
        println("Fokker Planck dFdt = C[F,F] relaxation test")

        # GaussLegendre pseudospectral
        # Benchmark data is taken from this run (GaussLegendre)
        @testset "boundary_data_option=$(bdo)" for bdo in ("direct_integration", "multipole_expansion", "delta_f_multipole")
            @testset "Gauss Legendre zero boundary condition at vpa=+-L, vperp=L" begin
                run_name = "gausslegendre_pseudospectral_zero"
                vperp_bc = "zero"
                run_test(test_input_gauss_legendre,
                expected_zero[bdo],
                1.0e-14, 2.0e-14; vperp=OptionsDict("bc" => vperp_bc),
                fokker_planck_collisions=OptionsDict("boundary_data_option"=> bdo))
            end
            @testset "Gauss Legendre no (explicitly) enforced boundary conditions: explicit timestepping" begin
                run_name = "gausslegendre_pseudospectral_none_bc"
                vperp_bc = "none"
                vpa_bc = "none"
                run_test(test_input_gauss_legendre, expected_none_bc[bdo], 1.0e-14, 2.0e-14;
                        vperp=OptionsDict("bc" => vperp_bc), vpa=OptionsDict("bc" => vpa_bc),
                        fokker_planck_collisions=OptionsDict("boundary_data_option"=> bdo))
            end
            @testset "Gauss Legendre no (explicitly) enforced boundary conditions: IMEX timestepping" begin
                run_name = "gausslegendre_pseudospectral_none_bc"
                vperp_bc = "none"
                vpa_bc = "none"
                run_test(test_input_gauss_legendre, expected_none_bc[bdo], 5.0e-12, 5.0e-12;
                        vperp=OptionsDict("bc" => vperp_bc), vpa=OptionsDict("bc" => vpa_bc),
                        fokker_planck_collisions_nonlinear_solver=OptionsDict("rtol" => 0.0,
                                                                            "atol" => 1.0e-14,
                                                                            "nonlinear_max_iterations" => 20,),
                        fokker_planck_collisions=OptionsDict("boundary_data_option"=> bdo),
                        timestepping=OptionsDict("kinetic_ion_solver" => "implicit_ion_fp_collisions",
                                                "type" => "PareschiRusso3(4,3,3)",))
            end
        end
    end
end

end # FokkerPlanckTimeEvolutionTests


using .FokkerPlanckTimeEvolutionTests

FokkerPlanckTimeEvolutionTests.runtests()
