module NumericalDissipationTests

include("setup.jl")

using Base.Filesystem: tempname

using moment_kinetics.interpolation: interpolate_to_grid_z, interpolate_to_grid_vpa
using moment_kinetics.load_data: get_run_info_no_setup, close_run_info,
                                 postproc_load_variable
using moment_kinetics.type_definitions: mk_float
using moment_kinetics.utils: merge_dict_with_kwargs!

# Useful parameters
const z_L = 1.0 # always 1 in normalized units?
const vpa_L = sqrt(2) * 8.0

# Use very small number of points in vpa_expected to reduce the amount of entries we
# need to store. First and last entries are within the grid (rather than at the ends) in
# order to get non-zero values.
# Note: in the arrays of numbers for expected data, space-separated entries have to stay
# on the same line.
const expected_base =
  (
   z=[z for z in range(-0.5 * z_L, 0.5 * z_L, length=11)],
   vpa=[vpa for vpa in range(-0.2 * vpa_L, 0.2 * vpa_L, length=3)],
   phi=[-1.3862945103834021 -1.2381930549024087; -1.2115184437701383 -1.1305749330849024; -0.8609863297378383 -0.8726047055664554; -0.5494724739047893 -0.5903605405746124; -0.3534597636915619 -0.3755621917538126; -0.2876820724517817 -0.2922033533727333; -0.3534597636915623 -0.37556219175381184; -0.5494724739047894 -0.5903605405746118; -0.8609863297378387 -0.8726047055664548; -1.2115184437701383 -1.1305749330849018; -1.3862945103834021 -1.2381930549024085],
   n_ion=[0.24999996268412486 0.2899075920447096; 0.2977457295906025 0.32284744085352596; 0.4227457487793365 0.417861633367743; 0.5772542482407849 0.5541276844715511; 0.7022542481827599 0.6869033098908922; 0.7499999999999996 0.7466166935122772; 0.7022542481827599 0.6869033098908928; 0.577254248240785 0.5541276844715514; 0.4227457487793365 0.41786163336774323; 0.2977457295906025 0.32284744085352607; 0.2499999626841249 0.2899075920447096],
   n_neutral=[0.7500000000000004 0.7736270906614504; 0.7022542481827604 0.7056606322357771; 0.5772542482407852 0.5582984547455504; 0.42274574877933696 0.40970684686766695; 0.2977457295906026 0.3054171439480648; 0.24999996268412514 0.26822062705191607; 0.2977457295906026 0.3054171439480648; 0.4227457487793371 0.4097068468676669; 0.5772542482407849 0.5582984547455506; 0.7022542481827602 0.7056606322357774; 0.7500000000000003 0.7736270906614503],
   upar_ion=sqrt(2) .* [-5.322469103131685e-18 3.9302328752599536e-18; 5.5962692628312325e-18 -0.18253502019686593; 5.3303105326277203e-17 -0.19682106406428274; 2.7741812322614154e-17 -0.11164490185709657; 7.916343035553234e-18 -0.033864620007744976; -6.745572440641438e-18 -1.3694828691207528e-17; -3.29493523676649e-17 0.03386462000774488; 1.6828473693140143e-17 0.11164490185709654; 3.3858228104962423e-17 0.1968210640642827; 5.889599659406931e-19 0.1825350201968663; -5.322469103131687e-18 1.2614247781750476e-17],
   upar_neutral=sqrt(2) .* [1.4151986223278988e-17 -3.0029012046059456e-17; -3.230397891897036e-18 -0.03601181630069792; -1.1115739998467628e-17 -0.008873956248425146; -1.506397581779682e-17 0.05481155489749537; 1.984016341010256e-17 0.07626828239103677; 3.058448961557067e-17 1.3010426069826053e-17; -4.425137311650691e-18 -0.07626828239103649; 4.289090369393511e-17 -0.05481155489749538; 8.8667200302095e-18 0.008873956248425057; -2.2523670590889133e-17 0.03601181630069798; 1.415198622327899e-17 -3.0146922868216235e-17],
   ppar_ion=2 .* [0.18749940294600148 0.23350116465548806; 0.2090928995170605 0.21982435628956448; 0.2440317605058449 0.20902035851036244; 0.24403180724085652 0.216087623674145; 0.20909325514775876 0.22229703936727682; 0.1874999999999984 0.22269000715638299; 0.2090932551477587 0.2222970393672767; 0.24403180724085652 0.21608762367414489; 0.24403176050584488 0.20902035851036252; 0.20909289951706053 0.21982435628956445; 0.18749940294600148 0.23350116465548812],
   ppar_neutral=2 .* [0.18749999999999836 0.24965070839654366; 0.2090932551477588 0.24542360857651924; 0.24403180724085685 0.22966516684202568; 0.2440317605058452 0.20666615095565452; 0.20909289951706064 0.1932680493473396; 0.18749940294600134 0.19151182470038583; 0.20909289951706053 0.19326804934733974; 0.24403176050584513 0.20666615095565455; 0.24403180724085685 0.2296651668420256; 0.20909325514775878 0.2454236085765192; 0.18749999999999833 0.24965070839654363],
   f_ion=1 ./ sqrt(2 * π) .* [0.03704633061368152 0.040599341664432284 0.042843149717574434 0.03039826712127894 0.012360459051458755 0.006338529257094846 0.01236045905145876 0.030398267121278934 0.042843149717574414 0.04059934166443226 0.037046330613681525; 0.2041161581761397 0.2512319184948211 0.39344122410888177 0.6277900647663589 0.9100364506644042 1.060660171779779 0.910036450664404 0.627790064766359 0.3934412241088816 0.2512319184948211 0.20411615817613968; 0.03704633061368151 0.04059934166443228 0.042843149717574434 0.03039826712127895 0.012360459051458753 0.006338529257094848 0.01236045905145876 0.03039826712127895 0.042843149717574414 0.04059934166443226 0.037046330613681525;;; 0.05409113750217345 0.060942118846170096 0.037355782742174805 0.014156853128452607 0.01104658584038974 0.019606935644145854 0.028227490929074943 0.027774698308480894 0.02679659389228075 0.0357627720666755 0.054091137502173446; 0.21149092307759615 0.24871017738931914 0.3724222925193106 0.5951062370523684 0.884254578364253 1.0490134562986957 0.884254578364253 0.5951062370523682 0.37242229251931064 0.24871017738931928 0.21149092307759615; 0.05409113750217343 0.0357627720666755 0.026796593892280774 0.0277746983084809 0.028227490929074967 0.019606935644145885 0.011046585840389757 0.014156853128452605 0.037355782742174846 0.06094211884617011 0.05409113750217343;;;;],
   f_neutral=1 ./ sqrt(2 * π) .* [0.006338529257094838 0.012360459051458746 0.030398267121279018 0.042843149717574455 0.04059934166443227 0.037046330613681476 0.04059934166443226 0.042843149717574455 0.030398267121279004 0.01236045905145874 0.006338529257094838; 1.0606601717797797 0.9100364506644045 0.6277900647663588 0.39344122410888205 0.25123191849482107 0.20411615817613982 0.25123191849482107 0.393441224108882 0.6277900647663588 0.9100364506644049 1.0606601717797794; 0.006338529257094839 0.012360459051458744 0.030398267121279028 0.04284314971757445 0.04059934166443228 0.03704633061368148 0.04059934166443227 0.04284314971757446 0.030398267121279004 0.012360459051458739 0.006338529257094839;;; 0.02460691323631649 0.041022700076584095 0.042124298266096774 0.03651400962451538 0.03703847070479192 0.04182304082868671 0.03705068809372411 0.01969267434431182 0.008701349527678462 0.010255967550373625 0.02460691323631649; 1.0487290573033359 0.9006415740400324 0.6236602584705063 0.3948639948118976 0.2567421073011552 0.21109313560633794 0.25674210730115526 0.39486399481189755 0.6236602584705063 0.9006415740400329 1.0487290573033357; 0.024606913236316523 0.010255967550373621 0.00870134952767847 0.01969267434431181 0.0370506880937241 0.041823040828686674 0.03703847070479192 0.0365140096245154 0.04212429826609675 0.041022700076584054 0.02460691323631652;;;;])

const expected_split_1 =
  (
   z=[z for z in range(-0.5 * z_L, 0.5 * z_L, length=11)],
   vpa=[vpa for vpa in range(-0.2 * vpa_L, 0.2 * vpa_L, length=3)],
   phi=[-1.3862943611198904 -1.238180625489492; -1.2115183691070182 -1.13057615902551; -0.8609863227503217 -0.872603536898021; -0.5494724738535587 -0.590357978134456; -0.35345976369155996 -0.3755616641479863; -0.28768207245178096 -0.2922007439239164; -0.35345976369155996 -0.3755616641479877; -0.5494724738535587 -0.5903579781344562; -0.8609863227503217 -0.8726035368980204; -1.2115183691070182 -1.13057615902551; -1.3862943611198906 -1.2381806254894923],
   n_ion=[0.25 0.2899111954482727; 0.2977457518173807 0.322847534762928; 0.4227457517297449 0.41786263774455534; 0.577254248270255 0.5541288837642595; 0.7022542481826192 0.6869034153137056; 0.7500000000000001 0.7466186417728669; 0.7022542481826192 0.6869034153137046; 0.577254248270255 0.5541288837642594; 0.4227457517297449 0.41786263774455545; 0.2977457518173807 0.3228475347629278; 0.25 0.2899111954482727],
   n_neutral=[0.7500000000000001 0.7736225137539305; 0.7022542481826193 0.7056608827990463; 0.577254248270255 0.558298733944617; 0.4227457517297449 0.4097073070742386; 0.2977457518173807 0.305416887556487; 0.25 0.26822367956929494; 0.2977457518173807 0.30541688755648705; 0.422745751729745 0.4097073070742387; 0.5772542482702551 0.5582987339446172; 0.7022542481826193 0.7056608827990465; 0.75 0.7736225137539307],
   upar_ion=sqrt(2) .* [2.338994838466916e-17 -4.675486343572177e-16; -5.703062170682306e-17 -0.18253837538520337; 3.590133812548222e-17 -0.19682242326269306; -6.124907692879937e-18 -0.11164636926420228; -6.045193458438667e-18 -0.033866451810154845; 3.157994482588082e-17 2.39220739029454e-16; -1.4574121535622858e-17 0.033866451810155865; 1.4526377132094358e-17 0.1116463692642019; -2.838259781712915e-17 0.1968224232626933; -7.217635564312387e-17 0.18253837538520312; 2.338994838466916e-17 -4.991021077831635e-16],
   upar_neutral=sqrt(2) .* [1.0414877805748774e-17 1.7558315370223843e-16; -2.1695337624225053e-17 -0.036010551291546206; -1.2706927603542093e-17 -0.008872851795435335; -2.9614930101475584e-18 0.05481196455572733; 4.268856815479238e-17 0.07626993604851698; -2.39841627270474e-17 1.2243014219613657e-16; 4.268856815479238e-17 -0.07626993604851655; -2.9614930101475584e-18 -0.05481196455572715; -1.2706927603542093e-17 0.008872851795435665; -2.1695337624225053e-17 0.03601055129154609; 1.0414877805748774e-17 1.7705748725882887e-16],
   ppar_ion=2 .* [0.18749943093282284 0.23350301940406093; 0.20909291512561226 0.21982447766832633; 0.2440317622089254 0.209021562800747; 0.24403180725332627 0.21608771531333332; 0.2090932551477392 0.22229678022925947; 0.18749999999999836 0.22269103917130412; 0.20909325514773922 0.22229678022925925; 0.24403180725332624 0.21608771531333326; 0.24403176220892547 0.209021562800747; 0.2090929151256123 0.2198244776683263; 0.18749943093282284 0.2335030194040609],
   ppar_neutral=2 .* [0.18749999999999817 0.24965000905238305; 0.20909325514773897 0.24542310128152242; 0.2440318072533265 0.22966456824824086; 0.2440317622089255 0.20666663140895455; 0.20909291512561218 0.19326737586368212; 0.18749943093282273 0.19151348906298848; 0.20909291512561215 0.19326737586368217; 0.24403176220892547 0.20666663140895453; 0.24403180725332657 0.22966456824824033; 0.20909325514773894 0.2454231012815224; 0.18749999999999822 0.24965000905238305],
   f_ion=1 ./ sqrt(2 * π) .* [0.037046336143347326 0.04059934469504523 0.04284315001650318 0.03039826712283314 0.012360459051463546 0.006338529257094833 0.012360459051463542 0.030398267122833115 0.04284315001650319 0.04059934469504524 0.037046336143347326; 0.20411618864323644 0.2512319372496666 0.39344122685499894 0.6277900647984213 0.9100364506642306 1.0606601717797788 0.9100364506642304 0.6277900647984217 0.39344122685499905 0.2512319372496667 0.20411618864323647; 0.037046336143347326 0.040599344695045246 0.042843150016503184 0.03039826712283314 0.012360459051463548 0.006338529257094834 0.01236045905146354 0.03039826712283312 0.04284315001650319 0.04059934469504525 0.037046336143347326;;; 0.05409145940947649 0.060943941669386506 0.03735761263270581 0.014156586621401781 0.011045852781034392 0.019607061456321972 0.02822706079898684 0.027774488203250222 0.026796500032547958 0.035762355775361666 0.05409145940947649; 0.21149605745985914 0.24870969888628217 0.37242214770522797 0.5951066874748036 0.8842546848469796 1.049015435868931 0.8842546848469771 0.5951066874748059 0.37242214770522847 0.2487096988862821 0.2114960574598592; 0.054091459409476565 0.03576235577536164 0.026796500032547955 0.027774488203250233 0.028227060798986806 0.019607061456322007 0.011045852781034409 0.014156586621401705 0.0373576126327059 0.06094394166938644 0.05409145940947656;;;;],
   f_neutral=1 ./ sqrt(2 * π) .* [0.006338529257094832 0.012360459051463532 0.030398267122833188 0.042843150016503156 0.040599344695045246 0.037046336143347264 0.04059934469504524 0.04284315001650315 0.030398267122833195 0.012360459051463525 0.006338529257094833; 1.060660171779779 0.9100364506642311 0.6277900647984211 0.39344122685499894 0.2512319372496666 0.20411618864323658 0.25123193724966664 0.3934412268549989 0.6277900647984211 0.910036450664231 1.0606601717797788; 0.006338529257094833 0.012360459051463536 0.030398267122833195 0.042843150016503156 0.04059934469504525 0.03704633614334726 0.04059934469504525 0.04284315001650315 0.030398267122833188 0.012360459051463529 0.006338529257094835;;; 0.024606929830002813 0.041022030670607904 0.042123928220688424 0.036513873288623495 0.03703801819048903 0.04182331769147937 0.03705113850889755 0.019693299054008098 0.008701498945582899 0.010255566549717545 0.024606929830002813; 1.0487202680564205 0.9006422142250379 0.6236603860005226 0.39486373427610055 0.2567416532346824 0.21109902137130615 0.25674165323468234 0.3948637342760998 0.6236603860005219 0.9006422142250398 1.0487202680564205; 0.024606929830002837 0.010255566549717541 0.008701498945582925 0.01969329905400806 0.037051138508897574 0.04182331769147937 0.03703801819048906 0.03651387328862351 0.04212392822068844 0.04102203067060788 0.024606929830002837;;;;])

const expected_split_2 =
  (
   z=[z for z in range(-0.5 * z_L, 0.5 * z_L, length=11)],
   vpa=[vpa for vpa in range(-0.2 * vpa_L, 0.2 * vpa_L, length=3)],
   phi=[-1.3862943611198904 -1.2382497548876024; -1.2115183691070182 -1.1305627229004203; -0.8609863227503217 -0.8725656555416611; -0.5494724738535587 -0.5903629521646461; -0.35345976369155996 -0.37556834654408733; -0.28768207245178096 -0.29220223313584676; -0.35345976369155996 -0.3755683465440876; -0.5494724738535587 -0.5903629521646457; -0.8609863227503217 -0.8725656555416612; -1.2115183691070182 -1.130562722900421; -1.3862943611198906 -1.238249754887602],
   n_ion=[0.25 0.28989115475453453; 0.2977457518173807 0.3228518583644988; 0.4227457517297449 0.4178784338898962; 0.577254248270255 0.5541260566144808; 0.7022542481826192 0.686898734450758; 0.7500000000000001 0.7466175299003062; 0.7022542481826192 0.6868987344507578; 0.577254248270255 0.5541260566144811; 0.4227457517297449 0.417878433889896; 0.2977457518173807 0.3228518583644986; 0.25 0.28989115475453464],
   n_neutral=[0.7500000000000001 0.7736195429725609; 0.7022542481826193 0.7056642280467166; 0.577254248270255 0.5582979370976066; 0.4227457517297449 0.4097097928224286; 0.2977457518173807 0.3054201606564752; 0.25 0.2682193888061918; 0.2977457518173807 0.3054201606564753; 0.422745751729745 0.4097097928224288; 0.5772542482702551 0.5582979370976067; 0.7022542481826193 0.7056642280467166; 0.75 0.7736195429725607],
   upar_ion=[0.0 -6.339330102522744e-16; 0.0 -0.2580900783665429; 0.0 -0.27834412249042845; 0.0 -0.15794859037367567; 0.0 -0.04791675119025321; 0.0 -2.7980208753240754e-16; 0.0 0.04791675119025328; 0.0 0.15794859037367542; 0.0 0.2783441224904285; 0.0 0.2580900783665434; -0.0 -6.724435963813495e-16],
   upar_neutral=[0.0 1.5369074014750378e-16; 0.0 -0.050924753393230805; 0.0 -0.012540224501492005; 0.0 0.07752359999969238; 0.0 0.10785640389262284; 0.0 2.156207070530547e-16; 0.0 -0.10785640389262308; 0.0 -0.0775235999996921; 0.0 0.01254022450149243; 0.0 0.05092475339323028; -0.0 1.5150343618013219e-16],
   ppar_ion=[0.37499886186564557 0.4669364117340328; 0.4181858302512238 0.4396435248673225; 0.48806352441785067 0.4180792286250636; 0.4880636145066524 0.43216241714767467; 0.41818651029547843 0.44457678332390943; 0.3749999999999968 0.44537732879074166; 0.41818651029547815 0.44457678332390965; 0.48806361450665275 0.43216241714767467; 0.48806352441785067 0.4180792286250633; 0.41818583025122374 0.439643524867322; 0.3749988618656457 0.46693641173403266],
   ppar_neutral=[0.37499999999999667 0.4992926487001379; 0.41818651029547843 0.4908478501015503; 0.48806361450665253 0.45932219333162194; 0.4880635244178508 0.4133372923086388; 0.4181858302512239 0.3865382380019078; 0.3749988618656456 0.3830145869374073; 0.4181858302512238 0.38653823800190806; 0.4880635244178508 0.41333729230863886; 0.4880636145066526 0.45932219333162155; 0.41818651029547843 0.49084785010155; 0.3749999999999968 0.4992926487001379]
,
   f_ion=[0.014779349821544982 0.01619679515544514 0.017091943967164465 0.012127154006234925 0.004931109720799406 0.0025287073162166013 0.004931109720799401 0.012127154006234937 0.01709194396716444 0.016196795155445125 0.014779349821544982; 0.08143057776418175 0.1002270419560517 0.1569603402454706 0.25045200006404533 0.3630520168764138 0.4231421876608009 0.36305201687641386 0.2504520000640453 0.15696034024547054 0.10022704195605167 0.08143057776418175; 0.014779349821544979 0.016196795155445136 0.017091943967164454 0.01212715400623492 0.004931109720799401 0.0025287073162166018 0.004931109720799399 0.01212715400623493 0.017091943967164444 0.016196795155445136 0.014779349821544982;;; 0.02157543758654595 0.024309393276145994 0.014903939179705759 0.00564874374595801 0.004407063531851565 0.007822006494082512 0.011259840660831574 0.011079258802902699 0.010692532937711784 0.014267599481547003 0.021575437586545974; 0.08437993884846971 0.09922484165151652 0.14857341088463416 0.23740502767289307 0.35276468694349544 0.4184986368675279 0.352764686943495 0.23740502767289387 0.14857341088463372 0.09922484165151628 0.08437993884846973; 0.021575437586545888 0.014267599481547062 0.010692532937711802 0.011079258802902715 0.011259840660831579 0.007822006494082467 0.0044070635318515594 0.005648743745958041 0.014903939179705778 0.024309393276145997 0.021575437586545874;;;;],
   f_neutral=[0.0025287073162166013 0.004931109720799403 0.01212715400623493 0.01709194396716446 0.016196795155445136 0.01477934982154498 0.01619679515544513 0.017091943967164465 0.012127154006234927 0.004931109720799404 0.0025287073162166005; 0.4231421876608008 0.3630520168764138 0.2504520000640454 0.15696034024547062 0.10022704195605174 0.08143057776418179 0.10022704195605171 0.1569603402454706 0.2504520000640454 0.36305201687641375 0.4231421876608008; 0.0025287073162165996 0.0049311097207994006 0.012127154006234923 0.017091943967164454 0.016196795155445136 0.014779349821544982 0.016196795155445143 0.017091943967164458 0.012127154006234927 0.004931109720799401 0.0025287073162166013;;; 0.00981651683228095 0.016365729075345233 0.016804510122383973 0.014567201288147114 0.014776178999211183 0.016684436026211728 0.0147808829973576 0.007856226065974598 0.003471518014661506 0.0040918054659733 0.009816516832280946; 0.4183825561626956 0.3593073528680633 0.24880500438879213 0.15752682850343774 0.10242541198123682 0.08421833106096677 0.10242541198123699 0.15752682850343774 0.24880500438879188 0.35930735286806414 0.41838255616269565; 0.009816516832280941 0.004091805465973285 0.0034715180146615105 0.007856226065974588 0.014780882997357522 0.016684436026211717 0.014776178999211218 0.01456720128814711 0.016804510122383955 0.016365729075345167 0.009816516832280941;;;;])

const expected_split_3 =
  (
   z=[z for z in range(-0.5 * z_L, 0.5 * z_L, length=11)],
   vpa=[vpa for vpa in range(-0.2 * vpa_L, 0.2 * vpa_L, length=3)],
   phi=[-1.3862943611198904 -1.3410604376068425; -1.2115183691070182 -1.1891033556850044; -0.8609863227503217 -0.8667623171748741; -0.5494724738535587 -0.5611428122303487; -0.35345976369155996 -0.35822159780343743; -0.28768207245178096 -0.28785114307438264; -0.35345976369155996 -0.3582215978034374; -0.5494724738535587 -0.5611428122303487; -0.8609863227503217 -0.8667623171748741; -1.2115183691070182 -1.1891033556850037; -1.3862943611198906 -1.3410604376068427],
   n_ion=[0.25 0.26156814476052914; 0.2977457518173807 0.30449458087019654; 0.4227457517297449 0.42031061816777404; 0.577254248270255 0.5705565766936985; 0.7022542481826192 0.6989181008285497; 0.7500000000000001 0.7498732077517729; 0.7022542481826192 0.6989181008285499; 0.577254248270255 0.5705565766936987; 0.4227457517297449 0.4203106181677741; 0.2977457518173807 0.30449458087019676; 0.25 0.26156814476052914],
   n_neutral=[0.7500000000000001 0.756223685597462; 0.7022542481826193 0.7038678239846565; 0.577254248270255 0.5721816543789945; 0.4227457517297449 0.41832103324782977; 0.2977457518173807 0.2997173080608556; 0.25 0.2556005572432842; 0.2977457518173807 0.29971730806085534; 0.422745751729745 0.41832103324782965; 0.5772542482702551 0.5721816543789939; 0.7022542481826193 0.7038678239846555; 0.75 0.7562236855974618],
   upar_ion=[0.0 4.1335207826009857e-17; 0.0 -0.1745784890304401; 0.0 -0.1581601946480822; 0.0 -0.06916145300171067; 0.0 -0.012092367194524533; 0.0 2.1912827048763475e-16; 0.0 0.012092367194524492; 0.0 0.06916145300171075; 0.0 0.1581601946480824; 0.0 0.17457848903043988; -0.0 1.0198181374528982e-17],
   upar_neutral=[0.0 -1.200423563178267e-16; 0.0 -0.03582275292853209; 0.0 -0.02143380036753739; 0.0 0.040555221350964635; 0.0 0.07618685113053958; 0.0 8.046948524187414e-16; 0.0 -0.07618685113053963; 0.0 -0.04055522135096483; 0.0 0.0214338003675374; 0.0 0.03582275292853248; -0.0 -1.1922758787602826e-16],
   ppar_ion=[0.37499999999999994 0.40481937420435643; 0.4181865102910224 0.4183594598551184; 0.48806361542476545 0.45881905751885416; 0.48806361542476534 0.4745194642716156; 0.41818651029102244 0.43094591216938893; 0.375 0.39502556144580636; 0.4181865102910223 0.43094591216938877; 0.4880636154247655 0.4745194642716156; 0.48806361542476523 0.4588190575188538; 0.4181865102910223 0.41835945985511885; 0.375 0.4048193742043564],
   ppar_neutral=[0.3749999999999999 0.4055167660805763; 0.41818651029102244 0.4424045482914368; 0.48806361542476545 0.48474760284828006; 0.4880636154247654 0.4605849841982589; 0.4181865102910224 0.40405175157818335; 0.375 0.3791696067491577; 0.41818651029102233 0.404051751578183; 0.4880636154247653 0.4605849841982589; 0.4880636154247654 0.48474760284827967; 0.4181865102910225 0.44240454829143633; 0.375 0.4055167660805763],
   f_ion=[0.0147777578308457 0.01619587060423262 0.017091845662373265 0.012127104588929096 0.004931172859944488 0.0025287072790002134 0.004931172859944479 0.012127104588929117 0.01709184566237324 0.016195870604232613 0.014777757830845712; 0.08143375198381995 0.10022900769141359 0.15696063264968918 0.2504520035452305 0.36305201685721555 0.42314218766081696 0.3630520168572155 0.2504520035452304 0.15696063264968918 0.1002290076914136 0.08143375198381994; 0.01477775783084571 0.016195870604232616 0.01709184566237327 0.0121271045889291 0.00493117285994449 0.0025287072790002147 0.004931172859944479 0.01212710458892912 0.017091845662373248 0.01619587060423261 0.014777757830845712;;; 0.016661755371268152 0.021125867713244106 0.018041331635371433 0.008278992618526524 0.0033029617286120475 0.004053596216153734 0.009006981688723683 0.013298265076640801 0.013234768673174517 0.013058963285973375 0.016661755371268145; 0.08286414986211385 0.10037292974420088 0.15485412283005565 0.24701349149435506 0.36030714772290207 0.42170519226508874 0.36030714772290207 0.2470134914943556 0.15485412283005529 0.10037292974420052 0.08286414986211382; 0.016661755371268176 0.013058963285973349 0.013234768673174557 0.013298265076640831 0.009006981688723662 0.004053596216153709 0.003302961728612026 0.008278992618526498 0.018041331635371492 0.0211258677132442 0.01666175537126817;;;;],
   f_neutral=[0.00252870727900021 0.004931172859944485 0.012127104588929101 0.01709184566237325 0.016195870604232627 0.014777757830845709 0.0161958706042326 0.01709184566237324 0.012127104588929091 0.00493117285994449 0.0025287072790002125; 0.423142187660817 0.36305201685721555 0.2504520035452305 0.15696063264968918 0.10022900769141359 0.08143375198381993 0.10022900769141356 0.15696063264968907 0.25045200354523045 0.3630520168572155 0.423142187660817; 0.0025287072790002104 0.004931172859944486 0.012127104588929103 0.017091845662373255 0.01619587060423262 0.014777757830845712 0.0161958706042326 0.01709184566237324 0.012127104588929094 0.00493117285994449 0.002528707279000214;;; 0.004361378703662391 0.010820057382103185 0.016633122997389182 0.016373836492062144 0.014533214303223017 0.015428106420462233 0.017026183124389006 0.013616225127158304 0.006318497909250446 0.0029179671969103422 0.00436137870366239; 0.4216836842916368 0.36183152433341104 0.2499579470878529 0.15742267827318285 0.10140398192095496 0.0828430527863771 0.10140398192095527 0.15742267827318307 0.24995794708785285 0.3618315243334106 0.4216836842916368; 0.004361378703662381 0.00291796719691033 0.006318497909250508 0.013616225127158278 0.017026183124389044 0.01542810642046219 0.014533214303223055 0.01637383649206221 0.0166331229973892 0.010820057382103185 0.004361378703662381;;;;])

# default inputs for tests
test_input = OptionsDict("composition" => OptionsDict("n_ion_species" => 1,
                                                      "n_neutral_species" => 1,
                                                      "electron_physics" => "boltzmann_electron_response",
                                                      "T_e" => 1.0),
                         "ion_species_1" => OptionsDict("initial_density" => 0.5,
                                                        "initial_temperature" => 0.3333333333333333),
                         "z_IC_ion_species_1" => OptionsDict("initialization_option" => "sinusoid",
                                                             "density_amplitude" => 0.5,
                                                             "density_phase" => 0.0,
                                                             "upar_amplitude" => 0.0,
                                                             "upar_phase" => 0.0,
                                                             "temperature_amplitude" => 0.5,
                                                             "temperature_phase" => mk_float(π)),
                         "neutral_species_1" => OptionsDict("initial_density" => 0.5,
                                                            "initial_temperature" => 0.3333333333333333),
                         "z_IC_neutral_species_1" => OptionsDict("initialization_option" => "sinusoid",
                                                                 "density_amplitude" => 0.5,
                                                                 "density_phase" => mk_float(π),
                                                                 "upar_amplitude" => 0.0,
                                                                 "upar_phase" => 0.0,
                                                                 "temperature_amplitude" => 0.5,
                                                                 "temperature_phase" => 0.0),
                         "output" => OptionsDict("run_name" => "numerical_dissipation"),
                         "evolve_moments" => OptionsDict("density" => false,
                                                         "parallel_flow" => false,
                                                         "moments_conservation" => true,
                                                         "pressure" => false),
                         "reactions" => OptionsDict("charge_exchange_frequency" => 0.8885765876316732,
                                                    "ionization_frequency" => 0.0),
                         "timestepping" => OptionsDict("nstep" => 100,
                                                       "dt" => 0.0007071067811865475,
                                                       "nwrite" => 100,
                                                       "nwrite_dfns" => 100,
                                                       "split_operators" => false),
                         "r" => OptionsDict("ngrid" => 1,
                                            "nelement" => 1,
                                            "discretization" => "chebyshev_pseudospectral"),
                         "z" => OptionsDict("ngrid" => 9,
                                            "nelement" => 4,
                                            "discretization" => "chebyshev_pseudospectral",
                                            "bc" => "periodic"),
                         "vpa" => OptionsDict("ngrid" => 9,
                                              "nelement" => 16,
                                              "L" => vpa_L,
                                              "discretization" => "gausslegendre_pseudospectral",
                                              "bc" => "zero"),
                         "vz" => OptionsDict("ngrid" => 9,
                                             "nelement" => 16,
                                             "L" => vpa_L,
                                             "discretization" => "gausslegendre_pseudospectral",
                                             "bc" => "zero"),
                         "ion_numerical_dissipation" => OptionsDict("vpa_dissipation_coefficient" => 0.028284271247461905),
                         "neutral_numerical_dissipation" => OptionsDict("vz_dissipation_coefficient" => 0.028284271247461905))

if global_size[] > 2 && global_size[] % 2 == 0
    # Test using distributed-memory
    test_input["z"]["nelement_local"] = test_input["z"]["nelement"] ÷ 2
end

test_input_split_1_moment =
    recursive_merge(test_input,
                    OptionsDict("output" => OptionsDict("run_name" => "numerical_dissipation_split_1_moment"),
                                "evolve_moments" => OptionsDict("density" => true)))

test_input_split_2_moments =
    recursive_merge(test_input_split_1_moment,
                    OptionsDict("output" => OptionsDict("run_name" => "numerical_dissipation_split_2_moments"),
                                "evolve_moments" => OptionsDict("parallel_flow" => true)))

test_input_split_3_moments =
    recursive_merge(test_input_split_2_moments,
                    OptionsDict("output" => OptionsDict("run_name" => "numerical_dissipation_split_3_moments"),
                                "evolve_moments" => OptionsDict("pressure" => true),
                                "timestepping" => OptionsDict("dt" => 0.00035355339059327376),
                                "vpa" => OptionsDict("L" => 20.784609690826528),
                                "vz" => OptionsDict("L" => 20.784609690826528),
                                "ion_numerical_dissipation" => OptionsDict("vpa_dissipation_coefficient" => 0.042426406871192854),
                                "neutral_numerical_dissipation" => OptionsDict("vz_dissipation_coefficient" => 0.042426406871192854),
                               ))

"""
Run a sound-wave test for a single set of parameters
"""
# Note 'name' should not be shared by any two tests in this file
function run_test(test_input, expected, rtol, atol, upar_rtol=nothing; args...)
    # by passing keyword arguments to run_test, args becomes a Dict which can be used to
    # update the default inputs

    # Make a copy to make sure nothing modifies the input Dicts defined in this test
    # script.
    input = deepcopy(test_input)

    if upar_rtol === nothing
        upar_rtol = rtol
    end

    # Convert keyword arguments to a unique name
    name = input["output"]["run_name"]
    if length(args) > 0
        name = string(name, "_", (string(k, "-", v, "_") for (k, v) in args)...)

        # Remove trailing "_"
        name = chop(name)
    end

    # Provide some progress info
    println("    - testing ", name)

    # Update default inputs with values to be changed
    merge_dict_with_kwargs!(input; args...)
    input["output"]["run_name"] = name

    # Suppress console output while running
    quietoutput() do
        # run simulation
        run_moment_kinetics(input)
    end

    phi = nothing
    n_ion = nothing
    upar_ion = nothing
    ppar_ion = nothing
    f_ion = nothing
    n_neutral = nothing
    upar_neutral = nothing
    ppar_neutral = nothing
    f_neutral = nothing
    z, z_spectral = nothing, nothing
    vpa, vpa_spectral = nothing, nothing

    if global_rank[] == 0
        quietoutput() do

            # Load and analyse output
            #########################

            path = joinpath(realpath(input["output"]["base_directory"]), name)

            # open the output file(s)
            run_info = get_run_info_no_setup(path; dfns=true)

            # load species, time coordinate data
            n_ion_species = run_info.composition.n_ion_species
            n_neutral_species = run_info.composition.n_neutral_species
            ntime = run_info.nt
            time = run_info.time
            
            # load fields data
            phi_zrt = postproc_load_variable(run_info, "phi")
            Er_zrt = postproc_load_variable(run_info, "Er")
            Ez_zrt = postproc_load_variable(run_info, "Ez")

            # load velocity moments data
            n_ion_zrst = postproc_load_variable(run_info, "density")
            upar_ion_zrst = postproc_load_variable(run_info, "parallel_flow")
            ppar_ion_zrst = postproc_load_variable(run_info, "parallel_pressure")
            qpar_ion_zrst = postproc_load_variable(run_info, "parallel_heat_flux")
            v_t_ion_zrst = postproc_load_variable(run_info, "thermal_speed")
            n_neutral_zrst = postproc_load_variable(run_info, "density_neutral")
            upar_neutral_zrst = postproc_load_variable(run_info, "uz_neutral")
            ppar_neutral_zrst = postproc_load_variable(run_info, "pz_neutral")
            qpar_neutral_zrst = postproc_load_variable(run_info, "qz_neutral")
            v_t_neutral_zrst = postproc_load_variable(run_info, "thermal_speed_neutral")
            z = run_info.z
            z_spectral = run_info.z_spectral

            # load particle distribution function (pdf) data
            f_ion_vpavperpzrst = postproc_load_variable(run_info, "f")
            f_neutral_vzvrvzetazrst = postproc_load_variable(run_info, "f_neutral")
            vpa = run_info.vpa
            vpa_spectral = run_info.vpa_spectral

            close_run_info(run_info)
            
            phi = phi_zrt[:,1,:]
            n_ion = n_ion_zrst[:,1,:,:]
            upar_ion = upar_ion_zrst[:,1,:,:]
            ppar_ion = ppar_ion_zrst[:,1,:,:]
            qpar_ion = qpar_ion_zrst[:,1,:,:]
            v_t_ion = v_t_ion_zrst[:,1,:,:]
            f_ion = f_ion_vpavperpzrst[:,1,:,1,:,:]
            n_neutral = n_neutral_zrst[:,1,:,:]
            upar_neutral = upar_neutral_zrst[:,1,:,:]
            ppar_neutral = ppar_neutral_zrst[:,1,:,:]
            qpar_neutral = qpar_neutral_zrst[:,1,:,:]
            v_t_neutral = v_t_neutral_zrst[:,1,:,:]
            f_neutral = f_neutral_vzvrvzetazrst[:,1,1,:,1,:,:]

            # Unnormalize f
            if input["evolve_moments"]["density"]
                for it ∈ 1:length(time), is ∈ 1:n_ion_species, iz ∈ 1:z.n
                    f_ion[:,iz,is,it] .*= n_ion[iz,is,it]
                end
                for it ∈ 1:length(time), isn ∈ 1:n_neutral_species, iz ∈ 1:z.n
                    f_neutral[:,iz,isn,it] .*= n_neutral[iz,isn,it]
                end
            end
            if input["evolve_moments"]["pressure"]
                for it ∈ 1:length(time), is ∈ 1:n_ion_species, iz ∈ 1:z.n
                    f_ion[:,iz,is,it] ./= v_t_ion[iz,is,it]
                end
                for it ∈ 1:length(time), isn ∈ 1:n_neutral_species, iz ∈ 1:z.n
                    f_neutral[:,iz,isn,it] ./= v_t_neutral[iz,isn,it]
                end
            end
        end

        # Test against values interpolated onto 'expected' grid which is fairly coarse no we
        # do not have to save too much data in this file

        # Use commented-out lines to get the test data to put in `expected`
        #newgrid_phi = cat(interpolate_to_grid_z(expected.z, phi[:, 1], z, z_spectral),
        #                   interpolate_to_grid_z(expected.z, phi[:, 2], z, z_spectral);
        #                   dims=2)
        #println("phi ", size(newgrid_phi))
        #println(newgrid_phi)
        #println()
        #newgrid_n_ion = cat(interpolate_to_grid_z(expected.z, n_ion[:, :, 1], z, z_spectral)[:,1],
        #                        interpolate_to_grid_z(expected.z, n_ion[:, :, 2], z, z_spectral)[:,1];
        #                        dims=2)
        #println("n_ion ", size(newgrid_n_ion))
        #println(newgrid_n_ion)
        #println()
        #newgrid_n_neutral = cat(interpolate_to_grid_z(expected.z, n_neutral[:, :, 1], z, z_spectral)[:,1],
        #                        interpolate_to_grid_z(expected.z, n_neutral[:, :, 2], z, z_spectral)[:,1];
        #                        dims=2)
        #println("n_neutral ", size(newgrid_n_neutral))
        #println(newgrid_n_neutral)
        #println()
        #newgrid_upar_ion = cat(interpolate_to_grid_z(expected.z, upar_ion[:, :, 1], z, z_spectral)[:,1],
        #                           interpolate_to_grid_z(expected.z, upar_ion[:, :, 2], z, z_spectral)[:,1];
        #                           dims=2)
        #println("upar_ion ", size(newgrid_upar_ion))
        #println(newgrid_upar_ion)
        #println()
        #newgrid_upar_neutral = cat(interpolate_to_grid_z(expected.z, upar_neutral[:, :, 1], z, z_spectral)[:,1],
        #                           interpolate_to_grid_z(expected.z, upar_neutral[:, :, 2], z, z_spectral)[:,1];
        #                           dims=2)
        #println("upar_neutral ", size(newgrid_upar_neutral))
        #println(newgrid_upar_neutral)
        #println()
        #newgrid_ppar_ion = cat(interpolate_to_grid_z(expected.z, ppar_ion[:, :, 1], z, z_spectral)[:,1],
        #                           interpolate_to_grid_z(expected.z, ppar_ion[:, :, 2], z, z_spectral)[:,1];
        #                           dims=2)
        #println("ppar_ion ", size(newgrid_ppar_ion))
        #println(newgrid_ppar_ion)
        #println()
        #newgrid_ppar_neutral = cat(interpolate_to_grid_z(expected.z, ppar_neutral[:, :, 1], z, z_spectral)[:,1],
        #                           interpolate_to_grid_z(expected.z, ppar_neutral[:, :, 2], z, z_spectral)[:,1];
        #                           dims=2)
        #println("ppar_neutral ", size(newgrid_ppar_neutral))
        #println(newgrid_ppar_neutral)
        #println()
        #newgrid_vth_ion = @. sqrt(2.0/3.0*newgrid_ppar_ion/newgrid_n_ion)
        #f1 = interpolate_to_grid_z(expected.z, f_ion[:, :, :, 1], z, z_spectral)
        #f2 = interpolate_to_grid_z(expected.z, f_ion[:, :, :, 2], z, z_spectral)
        #newgrid_f_ion1 = fill(NaN, length(expected.vpa), size(f1, 2), size(f1, 3),
        #                      size(f1, 4))
        #for iz ∈ 1:length(expected.z)
        #    wpa = copy(expected.vpa)
        #    if input["evolve_moments"]["parallel_flow"]
        #        wpa .-= newgrid_upar_ion[iz,1]
        #    end
        #    if input["evolve_moments"]["pressure"]
        #        wpa ./= newgrid_vth_ion[iz,1]
        #    end
        #    newgrid_f_ion1[:,iz,1] = interpolate_to_grid_vpa(wpa, f1[:,iz,1], vpa, vpa_spectral)
        #end
        #newgrid_f_ion2 = fill(NaN, length(expected.vpa), size(f2, 2), size(f2, 3),
        #                      size(f2, 4))
        #for iz ∈ 1:length(expected.z)
        #    wpa = copy(expected.vpa)
        #    if input["evolve_moments"]["parallel_flow"]
        #        wpa .-= newgrid_upar_ion[iz,2]
        #    end
        #    if input["evolve_moments"]["pressure"]
        #        wpa ./= newgrid_vth_ion[iz,2]
        #    end
        #    newgrid_f_ion2[:,iz,1] = interpolate_to_grid_vpa(wpa, f2[:,iz,1], vpa, vpa_spectral)
        #end
        #newgrid_f_ion = cat(newgrid_f_ion1, newgrid_f_ion2; dims=3)
        #println("f_ion ", size(newgrid_f_ion))
        #println(newgrid_f_ion)
        #println()
        #newgrid_vth_neutral = @. sqrt(2.0/3.0*newgrid_ppar_neutral/newgrid_n_neutral)
        #fn1 = interpolate_to_grid_z(expected.z, f_neutral[:, :, :, 1], z, z_spectral)
        #fn2 = interpolate_to_grid_z(expected.z, f_neutral[:, :, :, 2], z, z_spectral)
        #newgrid_f_neutral1 = fill(NaN, length(expected.vpa), size(fn1, 2), size(fn1, 3),
        #                          size(fn1, 4))
        #for iz ∈ 1:length(expected.z)
        #    wpa = copy(expected.vpa)
        #    if input["evolve_moments"]["parallel_flow"]
        #        wpa .-= newgrid_upar_neutral[iz,1]
        #    end
        #    if input["evolve_moments"]["pressure"]
        #        wpa ./= newgrid_vth_neutral[iz,1]
        #    end
        #    newgrid_f_neutral1[:,iz,1] = interpolate_to_grid_vpa(wpa, fn1[:,iz,1], vpa,
        #                                                         vpa_spectral)
        #end
        #newgrid_f_neutral2 = fill(NaN, length(expected.vpa), size(fn2, 2), size(fn2, 3),
        #                          size(fn2, 4))
        #for iz ∈ 1:length(expected.z)
        #    wpa = copy(expected.vpa)
        #    if input["evolve_moments"]["parallel_flow"]
        #        wpa .-= newgrid_upar_neutral[iz,2]
        #    end
        #    if input["evolve_moments"]["pressure"]
        #        wpa ./= newgrid_vth_neutral[iz,2]
        #    end
        #    newgrid_f_neutral2[:,iz,1] = interpolate_to_grid_vpa(wpa, fn2[:,iz,1], vpa, vpa_spectral)
        #end
        #newgrid_f_neutral = cat(newgrid_f_neutral1, newgrid_f_neutral2; dims=3)
        #println("f_neutral ", size(newgrid_f_neutral))
        #println(newgrid_f_neutral)
        #println()
        function test_values(tind)
            @testset "tind=$tind" begin
                newgrid_phi = interpolate_to_grid_z(expected.z, phi[:, tind], z, z_spectral)
                @test elementwise_isapprox(expected.phi[:, tind], newgrid_phi, rtol=rtol)

                # Check ion particle moments and f
                ######################################

                newgrid_n_ion = interpolate_to_grid_z(expected.z, n_ion[:, :, tind], z, z_spectral)
                @test elementwise_isapprox(expected.n_ion[:, tind], newgrid_n_ion[:,1], rtol=rtol)

                newgrid_upar_ion = interpolate_to_grid_z(expected.z, upar_ion[:, :, tind], z, z_spectral)
                @test elementwise_isapprox(expected.upar_ion[:, tind], newgrid_upar_ion[:,1], rtol=upar_rtol, atol=atol)

                newgrid_ppar_ion = interpolate_to_grid_z(expected.z, ppar_ion[:, :, tind], z, z_spectral)
                @test elementwise_isapprox(expected.ppar_ion[:, tind], newgrid_ppar_ion[:,1], rtol=rtol)

                newgrid_vth_ion = @. sqrt(2.0/3.0*newgrid_ppar_ion/newgrid_n_ion)
                newgrid_f_ion = interpolate_to_grid_z(expected.z, f_ion[:, :, :, tind], z, z_spectral)
                temp = newgrid_f_ion
                newgrid_f_ion = fill(NaN, length(expected.vpa),
                                     size(newgrid_f_ion, 2),
                                     size(newgrid_f_ion, 3),
                                     size(newgrid_f_ion, 4))
                for iz ∈ 1:length(expected.z)
                    wpa = copy(expected.vpa)
                    if input["evolve_moments"]["parallel_flow"]
                        wpa .-= newgrid_upar_ion[iz,1]
                    end
                    if input["evolve_moments"]["pressure"]
                        wpa ./= newgrid_vth_ion[iz,1]
                    end
                    newgrid_f_ion[:,iz,1] = interpolate_to_grid_vpa(wpa, temp[:,iz,1], vpa, vpa_spectral)
                end
                @test elementwise_isapprox(expected.f_ion[:, :, tind], newgrid_f_ion[:,:,1], rtol=rtol)

                # Check neutral particle moments and f
                ######################################

                newgrid_n_neutral = interpolate_to_grid_z(expected.z, n_neutral[:, :, tind], z, z_spectral)
                @test elementwise_isapprox(expected.n_neutral[:, tind], newgrid_n_neutral[:,:,1], rtol=rtol)

                newgrid_upar_neutral = interpolate_to_grid_z(expected.z, upar_neutral[:, :, tind], z, z_spectral)
                @test elementwise_isapprox(expected.upar_neutral[:, tind], newgrid_upar_neutral[:,:,1], rtol=upar_rtol, atol=atol)

                newgrid_ppar_neutral = interpolate_to_grid_z(expected.z, ppar_neutral[:, :, tind], z, z_spectral)
                @test elementwise_isapprox(expected.ppar_neutral[:, tind], newgrid_ppar_neutral[:,:,1], rtol=rtol)

                newgrid_vth_neutral = @. sqrt(2.0/3.0*newgrid_ppar_neutral/newgrid_n_neutral)
                newgrid_f_neutral = interpolate_to_grid_z(expected.z, f_neutral[:, :, :, tind], z, z_spectral)
                temp = newgrid_f_neutral
                newgrid_f_neutral = fill(NaN, length(expected.vpa),
                                         size(newgrid_f_neutral, 2),
                                         size(newgrid_f_neutral, 3),
                                         size(newgrid_f_neutral, 4))
                for iz ∈ 1:length(expected.z)
                    wpa = copy(expected.vpa)
                    if input["evolve_moments"]["parallel_flow"]
                        wpa .-= newgrid_upar_neutral[iz,1]
                    end
                    if input["evolve_moments"]["pressure"]
                        wpa ./= newgrid_vth_neutral[iz,1]
                    end
                    newgrid_f_neutral[:,iz,1] = interpolate_to_grid_vpa(wpa, temp[:,iz,1], vpa, vpa_spectral)
                end
                @test elementwise_isapprox(expected.f_neutral[:, :, tind], newgrid_f_neutral[:,:,1], rtol=rtol)
            end
        end

        # Test initial values
        test_values(1)

        # Test final values
        test_values(2)
    end
end


function runtests()
    # Create a temporary directory for test output
    test_output_directory = get_MPI_tempdir()

    @testset "numerical dissipation" verbose=use_verbose begin
        println("numerical dissipation tests")

        # Chebyshev pseudospectral
        # Benchmark data is taken from this run (Chebyshev with no splitting)
        @testset "base" begin
            test_input["output"]["base_directory"] = test_output_directory
            run_test(test_input, expected_base, 1.e-10, 1.0e-14)
        end
        @testset "split 1" begin
            test_input_split_1_moment["output"]["base_directory"] = test_output_directory
            run_test(test_input_split_1_moment, expected_split_1, 1.e-10, 1.0e-14)
        end
        @testset "split 2" begin
            test_input_split_2_moments["output"]["base_directory"] = test_output_directory
            run_test(test_input_split_2_moments, expected_split_2, 1.e-10, 1.0e-14)
        end
        @testset "split 3" begin
            test_input_split_3_moments["output"]["base_directory"] = test_output_directory
            run_test(test_input_split_3_moments, expected_split_3, 1.e-10, 1.0e-14)
        end
    end

    if global_rank[] == 0
        # Delete output directory to avoid using too much disk space
        rm(realpath(test_output_directory); recursive=true)
    end
end

end # NumericalDissipationTests


using .NumericalDissipationTests

NumericalDissipationTests.runtests()
