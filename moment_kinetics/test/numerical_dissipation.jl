module NumericalDissipationTests

include("setup.jl")

using Base.Filesystem: tempname

using moment_kinetics.interpolation: interpolate_to_grid_z, interpolate_to_grid_vpa
using moment_kinetics.load_data: get_run_info_no_setup, close_run_info,
                                 postproc_load_variable
using moment_kinetics.type_definitions: mk_float
using moment_kinetics.utils: merge_dict_with_kwargs!

# Useful parameters
const z_L = 1.0 # always 1 in normalized units?
const vpa_L = sqrt(2) * 8.0

# Use very small number of points in vpa_expected to reduce the amount of entries we
# need to store. First and last entries are within the grid (rather than at the ends) in
# order to get non-zero values.
# Note: in the arrays of numbers for expected data, space-separated entries have to stay
# on the same line.
const expected_base =
  (
   z=[z for z in range(-0.5 * z_L, 0.5 * z_L, length=11)],
   vpa=[vpa for vpa in range(-0.2 * vpa_L, 0.2 * vpa_L, length=3)],
   phi=[-1.3862945103834021 -1.2381930549024087; -1.2115184437701383 -1.1305749330849024; -0.8609863297378383 -0.8726047055664554; -0.5494724739047893 -0.5903605405746124; -0.3534597636915619 -0.3755621917538126; -0.2876820724517817 -0.2922033533727333; -0.3534597636915623 -0.37556219175381184; -0.5494724739047894 -0.5903605405746118; -0.8609863297378387 -0.8726047055664548; -1.2115184437701383 -1.1305749330849018; -1.3862945103834021 -1.2381930549024085],
   n_ion=[0.24999996268412486 0.2899075920447096; 0.2977457295906025 0.32284744085352596; 0.4227457487793365 0.417861633367743; 0.5772542482407849 0.5541276844715511; 0.7022542481827599 0.6869033098908922; 0.7499999999999996 0.7466166935122772; 0.7022542481827599 0.6869033098908928; 0.577254248240785 0.5541276844715514; 0.4227457487793365 0.41786163336774323; 0.2977457295906025 0.32284744085352607; 0.2499999626841249 0.2899075920447096],
   n_neutral=[0.7500000000000004 0.7736270906614504; 0.7022542481827604 0.7056606322357771; 0.5772542482407852 0.5582984547455504; 0.42274574877933696 0.40970684686766695; 0.2977457295906026 0.3054171439480648; 0.24999996268412514 0.26822062705191607; 0.2977457295906026 0.3054171439480648; 0.4227457487793371 0.4097068468676669; 0.5772542482407849 0.5582984547455506; 0.7022542481827602 0.7056606322357774; 0.7500000000000003 0.7736270906614503],
   upar_ion=sqrt(2) .* [-5.322469103131685e-18 3.9302328752599536e-18; 5.5962692628312325e-18 -0.18253502019686593; 5.3303105326277203e-17 -0.19682106406428274; 2.7741812322614154e-17 -0.11164490185709657; 7.916343035553234e-18 -0.033864620007744976; -6.745572440641438e-18 -1.3694828691207528e-17; -3.29493523676649e-17 0.03386462000774488; 1.6828473693140143e-17 0.11164490185709654; 3.3858228104962423e-17 0.1968210640642827; 5.889599659406931e-19 0.1825350201968663; -5.322469103131687e-18 1.2614247781750476e-17],
   upar_neutral=sqrt(2) .* [1.4151986223278988e-17 -3.0029012046059456e-17; -3.230397891897036e-18 -0.03601181630069792; -1.1115739998467628e-17 -0.008873956248425146; -1.506397581779682e-17 0.05481155489749537; 1.984016341010256e-17 0.07626828239103677; 3.058448961557067e-17 1.3010426069826053e-17; -4.425137311650691e-18 -0.07626828239103649; 4.289090369393511e-17 -0.05481155489749538; 8.8667200302095e-18 0.008873956248425057; -2.2523670590889133e-17 0.03601181630069798; 1.415198622327899e-17 -3.0146922868216235e-17],
   ppar_ion=2 .* [0.18749940294600148 0.23350116465548806; 0.2090928995170605 0.21982435628956448; 0.2440317605058449 0.20902035851036244; 0.24403180724085652 0.216087623674145; 0.20909325514775876 0.22229703936727682; 0.1874999999999984 0.22269000715638299; 0.2090932551477587 0.2222970393672767; 0.24403180724085652 0.21608762367414489; 0.24403176050584488 0.20902035851036252; 0.20909289951706053 0.21982435628956445; 0.18749940294600148 0.23350116465548812],
   ppar_neutral=2 .* [0.18749999999999836 0.24965070839654366; 0.2090932551477588 0.24542360857651924; 0.24403180724085685 0.22966516684202568; 0.2440317605058452 0.20666615095565452; 0.20909289951706064 0.1932680493473396; 0.18749940294600134 0.19151182470038583; 0.20909289951706053 0.19326804934733974; 0.24403176050584513 0.20666615095565455; 0.24403180724085685 0.2296651668420256; 0.20909325514775878 0.2454236085765192; 0.18749999999999833 0.24965070839654363],
   f_ion=1 ./ sqrt(2 * π) .* [0.03704633061368152 0.040599341664432284 0.042843149717574434 0.03039826712127894 0.012360459051458755 0.006338529257094846 0.01236045905145876 0.030398267121278934 0.042843149717574414 0.04059934166443226 0.037046330613681525; 0.2041161581761397 0.2512319184948211 0.39344122410888177 0.6277900647663589 0.9100364506644042 1.060660171779779 0.910036450664404 0.627790064766359 0.3934412241088816 0.2512319184948211 0.20411615817613968; 0.03704633061368151 0.04059934166443228 0.042843149717574434 0.03039826712127895 0.012360459051458753 0.006338529257094848 0.01236045905145876 0.03039826712127895 0.042843149717574414 0.04059934166443226 0.037046330613681525;;; 0.05409113750217345 0.060942118846170096 0.037355782742174805 0.014156853128452607 0.01104658584038974 0.019606935644145854 0.028227490929074943 0.027774698308480894 0.02679659389228075 0.0357627720666755 0.054091137502173446; 0.21149092307759615 0.24871017738931914 0.3724222925193106 0.5951062370523684 0.884254578364253 1.0490134562986957 0.884254578364253 0.5951062370523682 0.37242229251931064 0.24871017738931928 0.21149092307759615; 0.05409113750217343 0.0357627720666755 0.026796593892280774 0.0277746983084809 0.028227490929074967 0.019606935644145885 0.011046585840389757 0.014156853128452605 0.037355782742174846 0.06094211884617011 0.05409113750217343;;;;],
   f_neutral=1 ./ sqrt(2 * π) .* [0.006338529257094838 0.012360459051458746 0.030398267121279018 0.042843149717574455 0.04059934166443227 0.037046330613681476 0.04059934166443226 0.042843149717574455 0.030398267121279004 0.01236045905145874 0.006338529257094838; 1.0606601717797797 0.9100364506644045 0.6277900647663588 0.39344122410888205 0.25123191849482107 0.20411615817613982 0.25123191849482107 0.393441224108882 0.6277900647663588 0.9100364506644049 1.0606601717797794; 0.006338529257094839 0.012360459051458744 0.030398267121279028 0.04284314971757445 0.04059934166443228 0.03704633061368148 0.04059934166443227 0.04284314971757446 0.030398267121279004 0.012360459051458739 0.006338529257094839;;; 0.02460691323631649 0.041022700076584095 0.042124298266096774 0.03651400962451538 0.03703847070479192 0.04182304082868671 0.03705068809372411 0.01969267434431182 0.008701349527678462 0.010255967550373625 0.02460691323631649; 1.0487290573033359 0.9006415740400324 0.6236602584705063 0.3948639948118976 0.2567421073011552 0.21109313560633794 0.25674210730115526 0.39486399481189755 0.6236602584705063 0.9006415740400329 1.0487290573033357; 0.024606913236316523 0.010255967550373621 0.00870134952767847 0.01969267434431181 0.0370506880937241 0.041823040828686674 0.03703847070479192 0.0365140096245154 0.04212429826609675 0.041022700076584054 0.02460691323631652;;;;])

const expected_split_1 =
  (
   z=[z for z in range(-0.5 * z_L, 0.5 * z_L, length=11)],
   vpa=[vpa for vpa in range(-0.2 * vpa_L, 0.2 * vpa_L, length=3)],
   phi=[-1.3862943611198904 -1.2381803104388331; -1.2115183691070182 -1.130576137546705; -0.8609863227503217 -0.8726032638056876; -0.5494724738535587 -0.5903576742676381; -0.35345976369155996 -0.3755615886980196; -0.28768207245178096 -0.29220039839500117; -0.35345976369155996 -0.37556158869801975; -0.5494724738535587 -0.590357674267638; -0.8609863227503217 -0.8726032638056881; -1.2115183691070182 -1.1305761375467047; -1.3862943611198906 -1.2381803104388334],
   n_ion=[0.25 0.28991128678500033; 0.2977457518173807 0.32284756444970714; 0.4227457517297449 0.4178627746456882; 0.577254248270255 0.5541290214221384; 0.7022542481826192 0.6869034310766061; 0.7500000000000001 0.7466188997512408; 0.7022542481826192 0.6869034310766061; 0.577254248270255 0.5541290214221385; 0.4227457517297449 0.41786277464568816; 0.2977457518173807 0.32284756444970714; 0.25 0.2899112867850003],
   n_neutral=[0.7500000000000001 0.7736225157906338; 0.7022542481826193 0.7056608909202838; 0.577254248270255 0.5582987526699986; 0.4227457517297449 0.40970732191763126; 0.2977457518173807 0.3054168938739112; 0.25 0.26822368385808243; 0.2977457518173807 0.30541689387391097; 0.422745751729745 0.40970732191763093; 0.5772542482702551 0.5582987526699978; 0.7022542481826193 0.7056608909202836; 0.75 0.7736225157906339],
   upar_ion=[-5.2119631310451596e-17 -1.1684988913962524e-16; -3.397024703741894e-17 -0.25814804006007824; -1.6959452026780547e-17 -0.2783486901755448; 9.283551606073192e-17 -0.1578920408911023; -3.3712111769321345e-17 -0.04789455409606275; -2.5801034145560256e-17 1.0242322398199e-17; 4.703865150640373e-17 0.047894554096062664; -7.794294945190832e-17 0.15789204089110248; -2.511174012680505e-17 0.2783486901755452; -1.05159097777111e-17 0.2581480400600782; -5.211963131045161e-17 -1.2593486012940945e-16],
   upar_neutral=[-2.5801034145560256e-17 -5.448793543097463e-17; -3.371211176932135e-17 -0.05092659894840487; 9.283551606073192e-17 -0.012548079157694627; -1.6959452026780547e-17 0.07751578977816725; -3.3970247037418947e-17 0.1078619644456977; -5.2119631310451596e-17 6.743059886502034e-17; -3.3970247037418947e-17 -0.10786196444569751; -1.6959452026780547e-17 -0.07751578977816756; 9.283551606073192e-17 0.012548079157694259; -3.371211176932135e-17 0.05092659894840472; -2.5801034145560256e-17 -6.375622287939039e-17],
   ppar_ion=[0.37499886186564574 0.46700615576090565; 0.41818583025122386 0.4396489608687257; 0.48806352441785084 0.4180432716816378; 0.48806361450665237 0.4321755440230365; 0.41818651029547854 0.44459355752536994; 0.3749999999999968 0.4453821865528541; 0.41818651029547815 0.44459355752536983; 0.48806361450665275 0.4321755440230365; 0.48806352441785067 0.4180432716816373; 0.4181858302512238 0.4396489608687258; 0.3749988618656457 0.46700615576090565],
   ppar_neutral=[0.37499999999999667 0.49930002051190836; 0.41818651029547843 0.49084620895501113; 0.4880636145066526 0.45932915305548194; 0.48806352441785084 0.41333328058973057; 0.41818583025122386 0.38653475892872236; 0.37499886186564574 0.38302698581464517; 0.41818583025122374 0.3865347589287222; 0.4880635244178508 0.41333328058973035; 0.4880636145066526 0.4593291530554817; 0.41818651029547854 0.490846208955011; 0.3749999999999968 0.4993000205119083],
   f_ion=[0.014779349821544982 0.016196795155445136 0.017091943967164454 0.012127154006234925 0.004931109720799403 0.0025287073162166005 0.0049311097207994 0.012127154006234937 0.01709194396716444 0.01619679515544513 0.014779349821544982; 0.08143057776418178 0.10022704195605173 0.15696034024547062 0.2504520000640454 0.3630520168764138 0.4231421876608009 0.36305201687641386 0.2504520000640453 0.15696034024547056 0.10022704195605173 0.08143057776418175; 0.014779349821544977 0.016196795155445143 0.01709194396716446 0.012127154006234923 0.004931109720799403 0.0025287073162166005 0.004931109720799399 0.012127154006234932 0.01709194396716444 0.016196795155445132 0.014779349821544982;;; 0.021579375010819926 0.024313107514397993 0.014903532869721504 0.005647664317470947 0.004406658415167603 0.007822087184145003 0.011260967422083568 0.011080421498503645 0.010690260971819483 0.014267116335032214 0.02157937501081992; 0.08437473959264719 0.09922085839495494 0.14857504223574672 0.2374132404445736 0.35276657549506474 0.41849675840563333 0.35276657549506535 0.237413240444574 0.1485750422357466 0.09922085839495501 0.0843747395926472; 0.02157937501081992 0.014267116335032212 0.010690260971819505 0.011080421498503624 0.011260967422083573 0.007822087184145012 0.004406658415167616 0.005647664317470948 0.014903532869721481 0.024313107514397945 0.02157937501081992;;;;],
   f_neutral=[0.002528707316216601 0.0049311097207994006 0.012127154006234925 0.017091943967164454 0.016196795155445136 0.014779349821544982 0.016196795155445132 0.017091943967164458 0.012127154006234929 0.004931109720799401 0.0025287073162166013; 0.4231421876608008 0.3630520168764138 0.2504520000640454 0.15696034024547062 0.10022704195605174 0.08143057776418179 0.10022704195605171 0.1569603402454706 0.2504520000640454 0.36305201687641375 0.4231421876608008; 0.0025287073162166005 0.004931109720799401 0.012127154006234923 0.01709194396716446 0.01619679515544514 0.014779349821544982 0.016196795155445136 0.01709194396716446 0.012127154006234929 0.004931109720799401 0.002528707316216601;;; 0.009816744717501168 0.016365422475090284 0.016805016122414675 0.014566929316167309 0.01477603201360881 0.016685090050396777 0.014781265496334545 0.00785648942517842 0.0034713962917606467 0.004091379279805453 0.00981674471750117; 0.4183788545493269 0.3593042622144561 0.2488045039135618 0.15752784542797385 0.10242510368706788 0.08421632529073125 0.10242510368706789 0.15752784542797402 0.2488045039135615 0.3593042622144565 0.41837885454932683; 0.009816744717501194 0.004091379279805446 0.0034713962917606507 0.00785648942517843 0.014781265496334541 0.016685090050396832 0.014776032013608782 0.014566929316167326 0.016805016122414664 0.016365422475090274 0.009816744717501196;;;;])

const expected_split_2 =
  (
   z=[z for z in range(-0.5 * z_L, 0.5 * z_L, length=11)],
   vpa=[vpa for vpa in range(-0.2 * vpa_L, 0.2 * vpa_L, length=3)],
   phi=[-1.3862943611198904 -1.2382494109572217; -1.2115183691070182 -1.130562684118631; -0.8609863227503217 -0.8725653486872111; -0.5494724738535587 -0.5903626507763149; -0.35345976369155996 -0.3755682752183704; -0.28768207245178096 -0.29220189032194943; -0.35345976369155996 -0.37556827521837055; -0.5494724738535587 -0.590362650776315; -0.8609863227503217 -0.8725653486872111; -1.2115183691070182 -1.1305626841186307; -1.3862943611198906 -1.238249410957221],
   n_ion=[0.25 0.2898912544569271; 0.2977457518173807 0.3228518925675924; 0.4227457517297449 0.4178785836473793; 0.577254248270255 0.5541261888943806; 0.7022542481826192 0.686898742892693; 0.7500000000000001 0.7466177858512151; 0.7022542481826192 0.686898742892693; 0.577254248270255 0.5541261888943807; 0.4227457517297449 0.4178785836473791; 0.2977457518173807 0.3228518925675923; 0.25 0.2898912544569271],
   n_neutral=[0.7500000000000001 0.7736195786868946; 0.7022542481826193 0.7056642452084763; 0.577254248270255 0.5582979860437491; 0.4227457517297449 0.40970982947532797; 0.2977457518173807 0.30542017382121955; 0.25 0.2682194076923606; 0.2977457518173807 0.3054201738212195; 0.422745751729745 0.40970982947532797; 0.5772542482702551 0.5582979860437493; 0.7022542481826193 0.7056642452084761; 0.75 0.7736195786868945],
   upar_ion=[0.0 -3.917357974461688e-16; 0.0 -0.2580898901017974; 0.0 -0.27834388147749106; 0.0 -0.15794881606648742; 0.0 -0.04791692031723527; 0.0 1.271250764161777e-15; 0.0 0.04791692031723508; 0.0 0.15794881606648706; 0.0 0.27834388147749145; 0.0 0.2580898901017965; -0.0 -3.713970987449335e-16],
   upar_neutral=[0.0 -1.0737328452574413e-16; 0.0 -0.05092471952585373; 0.0 -0.012540152428676458; 0.0 0.07752354320030501; 0.0 0.10785637525398664; 0.0 -3.431567638552402e-16; 0.0 -0.10785637525398674; 0.0 -0.07752354320030458; 0.0 0.012540152428676137; 0.0 0.050924719525853826; -0.0 -1.1364023681076837e-16],
   ppar_ion=[0.37499886186564557 0.46693652531956964; 0.4181858302512238 0.4396435544843942; 0.48806352441785067 0.4180794201450271; 0.4880636145066524 0.4321625063319137; 0.41818651029547843 0.44457676611570396; 0.3749999999999968 0.44537743739580693; 0.41818651029547815 0.44457676611570407; 0.48806361450665275 0.43216250633191344; 0.48806352441785067 0.41807942014502714; 0.41818583025122374 0.43964355448439446; 0.3749988618656457 0.4669365253195697],
   ppar_neutral=[0.37499999999999667 0.49929267110252806; 0.41818651029547843 0.4908478629541912; 0.48806361450665253 0.4593222388729395; 0.4880635244178508 0.41333733343288465; 0.4181858302512239 0.3865382512706555; 0.3749988618656456 0.3830146140676367; 0.4181858302512238 0.38653825127065544; 0.4880635244178508 0.41333733343288426; 0.4880636145066526 0.4593222388729393; 0.41818651029547843 0.490847862954192; 0.3749999999999968 0.49929267110252806],
   f_ion=[0.014779349821544982 0.01619679515544514 0.017091943967164465 0.012127154006234925 0.004931109720799406 0.0025287073162166013 0.004931109720799401 0.012127154006234937 0.01709194396716444 0.016196795155445125 0.014779349821544982; 0.08143057776418175 0.1002270419560517 0.1569603402454706 0.25045200006404533 0.3630520168764138 0.4231421876608009 0.36305201687641386 0.2504520000640453 0.15696034024547054 0.10022704195605167 0.08143057776418175; 0.014779349821544979 0.016196795155445136 0.017091943967164454 0.01212715400623492 0.004931109720799401 0.0025287073162166018 0.004931109720799399 0.01212715400623493 0.017091943967164444 0.016196795155445136 0.014779349821544982;;; 0.021575441655209665 0.02430938865419564 0.01490394508036214 0.005648743633202275 0.004407062729072253 0.007822008422894414 0.01125983969273222 0.011079262284777784 0.010692537343006873 0.014267601394448009 0.021575441655209665; 0.08437996563423504 0.09922487363446936 0.14857350803171449 0.2374050546749877 0.35276469492879947 0.4184987696411744 0.3527646949287997 0.23740505467498774 0.14857350803171476 0.09922487363446943 0.08437996563423505; 0.021575441655209606 0.014267601394447983 0.010692537343006885 0.011079262284777756 0.011259839692732204 0.00782200842289445 0.004407062729072265 0.005648743633202261 0.014903945080362113 0.0243093886541956 0.021575441655209606;;;;],
   f_neutral=[0.0025287073162166013 0.004931109720799403 0.01212715400623493 0.01709194396716446 0.016196795155445136 0.01477934982154498 0.01619679515544513 0.017091943967164465 0.012127154006234927 0.004931109720799404 0.0025287073162166005; 0.4231421876608008 0.3630520168764138 0.2504520000640454 0.15696034024547062 0.10022704195605174 0.08143057776418179 0.10022704195605171 0.1569603402454706 0.2504520000640454 0.36305201687641375 0.4231421876608008; 0.0025287073162165996 0.0049311097207994006 0.012127154006234923 0.017091943967164454 0.016196795155445136 0.014779349821544982 0.016196795155445143 0.017091943967164458 0.012127154006234927 0.004931109720799401 0.0025287073162166013;;; 0.009816517190572678 0.01636572917134848 0.01680451117116632 0.014567203259556452 0.014776179770417015 0.016684437070485354 0.0147808826237043 0.007856226289172138 0.0034715186200058564 0.004091805542242547 0.00981651719057268; 0.41838256773336346 0.35930736109317624 0.24880502300610777 0.15752684576915188 0.10242541846838957 0.08421833439720089 0.10242541846838939 0.15752684576915194 0.2488050230061074 0.35930736109317596 0.4183825677333633; 0.009816517190572705 0.004091805542242534 0.0034715186200058594 0.007856226289172149 0.014780882623704306 0.016684437070485315 0.014776179770417012 0.01456720325955644 0.01680451117116633 0.016365729171348525 0.009816517190572702;;;;])

const expected_split_3 =
  (
   z=[z for z in range(-0.5 * z_L, 0.5 * z_L, length=11)],
   vpa=[vpa for vpa in range(-0.2 * vpa_L, 0.2 * vpa_L, length=3)],
   phi=[-1.3862943611198904 -1.3410604347153388; -1.2115183691070182 -1.1891033537543234; -0.8609863227503217 -0.8667623117940916; -0.5494724738535587 -0.5611427833462517; -0.35345976369155996 -0.35822158846367885; -0.28768207245178096 -0.2878511199778991; -0.35345976369155996 -0.3582215884636796; -0.5494724738535587 -0.5611427833462518; -0.8609863227503217 -0.8667623117940911; -1.2115183691070182 -1.1891033537543227; -1.3862943611198906 -1.3410604347153385],
   n_ion=[0.25 0.2615681455168546; 0.2977457518173807 0.3044945813222835; 0.4227457517297449 0.42031062026557936; 0.577254248270255 0.5705565900069461; 0.7022542481826192 0.6989181038446297; 0.7500000000000001 0.7498732250712075; 0.7022542481826192 0.698918103844629; 0.577254248270255 0.5705565900069458; 0.4227457517297449 0.4203106202655796; 0.2977457518173807 0.30449458132228374; 0.25 0.26156814551685453],
   n_neutral=[0.7500000000000001 0.7562236854395022; 0.7022542481826193 0.703867823985062; 0.577254248270255 0.5721816544162599; 0.4227457517297449 0.418321031818265; 0.2977457518173807 0.29971730750509934; 0.25 0.25560055710788243; 0.2977457518173807 0.2997173075050996; 0.422745751729745 0.41832103181826535; 0.5772542482702551 0.5721816544162605; 0.7022542481826193 0.7038678239850621; 0.75 0.7562236854395022],
   upar_ion=[0.0 -9.486497958705042e-16; 0.0 -0.17457848752445082; 0.0 -0.1581601902524765; 0.0 -0.06916151413407225; 0.0 -0.01209239589209062; 0.0 5.095699388705036e-16; 0.0 0.01209239589209085; 0.0 0.06916151413407212; 0.0 0.1581601902524765; 0.0 0.17457848752445104; -0.0 -9.345398448679404e-16],
   upar_neutral=[0.0 9.490580657510808e-17; 0.0 -0.03582275191332251; 0.0 -0.021433797944499674; 0.0 0.04055522461939472; 0.0 0.07618685264702701; 0.0 3.267920873142871e-16; 0.0 -0.07618685264702647; 0.0 -0.04055522461939469; 0.0 0.021433797944499264; 0.0 0.03582275191332246; -0.0 9.426757354315556e-17],
   ppar_ion=[0.37499999999999994 0.40481937495033826; 0.4181865102910224 0.4183594663416785; 0.48806361542476545 0.45881907319130477; 0.48806361542476534 0.4745194895923358; 0.41818651029102244 0.4309459221567811; 0.375 0.3950255761686111; 0.4181865102910223 0.4309459221567809; 0.4880636154247655 0.47451948959233553; 0.48806361542476523 0.45881907319130466; 0.4181865102910223 0.4183594663416781; 0.375 0.40481937495033815],
   ppar_neutral=[0.3749999999999999 0.40551676595391695; 0.41818651029102244 0.4424045490747442; 0.48806361542476545 0.48474760479114165; 0.4880636154247654 0.4605849820162089; 0.4181865102910224 0.4040517508796592; 0.375 0.3791696060996229; 0.41818651029102233 0.40405175087965894; 0.4880636154247653 0.46058498201620923; 0.4880636154247654 0.48474760479114226; 0.4181865102910225 0.44240454907474475; 0.375 0.405516765953917],
   f_ion=[0.0147777578308457 0.01619587060423262 0.017091845662373265 0.012127104588929096 0.004931172859944488 0.0025287072790002134 0.004931172859944479 0.012127104588929117 0.01709184566237324 0.016195870604232613 0.014777757830845712; 0.08143375198381995 0.10022900769141359 0.15696063264968918 0.2504520035452305 0.36305201685721555 0.42314218766081696 0.3630520168572155 0.2504520035452304 0.15696063264968918 0.1002290076914136 0.08143375198381994; 0.01477775783084571 0.016195870604232616 0.01709184566237327 0.0121271045889291 0.00493117285994449 0.0025287072790002147 0.004931172859944479 0.01212710458892912 0.017091845662373248 0.01619587060423261 0.014777757830845712;;; 0.01666175548638304 0.021125867951596048 0.01804133188949822 0.008278995535987023 0.003302962395369085 0.004053596529916369 0.00900698148232524 0.013298264427260247 0.01323476967118232 0.013058963570019289 0.01666175548638304; 0.08286415037579627 0.10037292937408504 0.15485412241548888 0.24701348852587665 0.3603071456509015 0.42170519706833187 0.36030714565090105 0.24701348852587726 0.15485412241548915 0.10037292937408519 0.08286415037579625; 0.01666175548638299 0.013058963570019342 0.013234769671182334 0.01329826442726019 0.009006981482325201 0.0040535965299163985 0.0033029623953690665 0.008278995535986983 0.018041331889498195 0.02112586795159602 0.01666175548638299;;;;],
   f_neutral=[0.00252870727900021 0.004931172859944485 0.012127104588929101 0.01709184566237325 0.016195870604232627 0.014777757830845709 0.0161958706042326 0.01709184566237324 0.012127104588929091 0.00493117285994449 0.0025287072790002125; 0.423142187660817 0.36305201685721555 0.2504520035452305 0.15696063264968918 0.10022900769141359 0.08143375198381993 0.10022900769141356 0.15696063264968907 0.25045200354523045 0.3630520168572155 0.423142187660817; 0.0025287072790002104 0.004931172859944486 0.012127104588929103 0.017091845662373255 0.01619587060423262 0.014777757830845712 0.0161958706042326 0.01709184566237324 0.012127104588929094 0.00493117285994449 0.002528707279000214;;; 0.004361378710193677 0.010820057396101614 0.01663312301218855 0.01637383632754996 0.014533214245408611 0.015428106389892022 0.017026183120588234 0.01361622508919574 0.006318498106363036 0.0029179672374008408 0.0043613787101936755; 0.4216836843122031 0.36183152411263086 0.24995794658258078 0.15742267777064986 0.10140398171256877 0.08284305280263297 0.10140398171256902 0.15742267777064983 0.24995794658258125 0.36183152411263114 0.42168368431220316; 0.004361378710193683 0.0029179672374008273 0.006318498106362967 0.013616225089195634 0.017026183120588307 0.015428106389892032 0.0145332142454086 0.016373836327549983 0.016633123012188576 0.010820057396101656 0.0043613787101936825;;;;])

# default inputs for tests
test_input = OptionsDict("composition" => OptionsDict("n_ion_species" => 1,
                                                      "n_neutral_species" => 1,
                                                      "electron_physics" => "boltzmann_electron_response",
                                                      "T_e" => 1.0),
                         "ion_species_1" => OptionsDict("initial_density" => 0.5,
                                                        "initial_temperature" => 0.3333333333333333),
                         "z_IC_ion_species_1" => OptionsDict("initialization_option" => "sinusoid",
                                                             "density_amplitude" => 0.5,
                                                             "density_phase" => 0.0,
                                                             "upar_amplitude" => 0.0,
                                                             "upar_phase" => 0.0,
                                                             "temperature_amplitude" => 0.5,
                                                             "temperature_phase" => mk_float(π)),
                         "neutral_species_1" => OptionsDict("initial_density" => 0.5,
                                                            "initial_temperature" => 0.3333333333333333),
                         "z_IC_neutral_species_1" => OptionsDict("initialization_option" => "sinusoid",
                                                                 "density_amplitude" => 0.5,
                                                                 "density_phase" => mk_float(π),
                                                                 "upar_amplitude" => 0.0,
                                                                 "upar_phase" => 0.0,
                                                                 "temperature_amplitude" => 0.5,
                                                                 "temperature_phase" => 0.0),
                         "output" => OptionsDict("run_name" => "numerical_dissipation"),
                         "evolve_moments" => OptionsDict("density" => false,
                                                         "parallel_flow" => false,
                                                         "moments_conservation" => true,
                                                         "pressure" => false),
                         "reactions" => OptionsDict("charge_exchange_frequency" => 0.8885765876316732,
                                                    "ionization_frequency" => 0.0),
                         "timestepping" => OptionsDict("nstep" => 100,
                                                       "dt" => 0.0007071067811865475,
                                                       "nwrite" => 100,
                                                       "nwrite_dfns" => 100,
                                                       "split_operators" => false),
                         "r" => OptionsDict("ngrid" => 1,
                                            "nelement" => 1,
                                            "bc" => "periodic",
                                            "discretization" => "chebyshev_pseudospectral"),
                         "z" => OptionsDict("ngrid" => 9,
                                            "nelement" => 4,
                                            "discretization" => "chebyshev_pseudospectral",
                                            "bc" => "periodic"),
                         "vpa" => OptionsDict("ngrid" => 9,
                                              "nelement" => 16,
                                              "L" => vpa_L,
                                              "discretization" => "gausslegendre_pseudospectral",
                                              "bc" => "zero"),
                         "vz" => OptionsDict("ngrid" => 9,
                                             "nelement" => 16,
                                             "L" => vpa_L,
                                             "discretization" => "gausslegendre_pseudospectral",
                                             "bc" => "zero"),
                         "ion_numerical_dissipation" => OptionsDict("vpa_dissipation_coefficient" => 0.028284271247461905),
                         "neutral_numerical_dissipation" => OptionsDict("vz_dissipation_coefficient" => 0.028284271247461905))

if global_size[] > 2 && global_size[] % 2 == 0
    # Test using distributed-memory
    test_input["z"]["nelement_local"] = test_input["z"]["nelement"] ÷ 2
end

test_input_split_1_moment =
    recursive_merge(test_input,
                    OptionsDict("output" => OptionsDict("run_name" => "numerical_dissipation_split_1_moment"),
                                "evolve_moments" => OptionsDict("density" => true)))

test_input_split_2_moments =
    recursive_merge(test_input_split_1_moment,
                    OptionsDict("output" => OptionsDict("run_name" => "numerical_dissipation_split_2_moments"),
                                "evolve_moments" => OptionsDict("parallel_flow" => true)))

test_input_split_3_moments =
    recursive_merge(test_input_split_2_moments,
                    OptionsDict("output" => OptionsDict("run_name" => "numerical_dissipation_split_3_moments"),
                                "evolve_moments" => OptionsDict("pressure" => true),
                                "timestepping" => OptionsDict("dt" => 0.00035355339059327376),
                                "vpa" => OptionsDict("L" => 20.784609690826528),
                                "vz" => OptionsDict("L" => 20.784609690826528),
                                "ion_numerical_dissipation" => OptionsDict("vpa_dissipation_coefficient" => 0.042426406871192854),
                                "neutral_numerical_dissipation" => OptionsDict("vz_dissipation_coefficient" => 0.042426406871192854),
                               ))

"""
Run a sound-wave test for a single set of parameters
"""
# Note 'name' should not be shared by any two tests in this file
function run_test(test_input, expected, rtol, atol, upar_rtol=nothing; args...)
    # by passing keyword arguments to run_test, args becomes a Dict which can be used to
    # update the default inputs

    # Make a copy to make sure nothing modifies the input Dicts defined in this test
    # script.
    input = deepcopy(test_input)

    if upar_rtol === nothing
        upar_rtol = rtol
    end

    # Convert keyword arguments to a unique name
    name = input["output"]["run_name"]
    if length(args) > 0
        name = string(name, "_", (string(k, "-", v, "_") for (k, v) in args)...)

        # Remove trailing "_"
        name = chop(name)
    end

    # Provide some progress info
    println("    - testing ", name)

    # Update default inputs with values to be changed
    merge_dict_with_kwargs!(input; args...)
    input["output"]["run_name"] = name

    # Suppress console output while running
    quietoutput() do
        # run simulation
        run_moment_kinetics(input)
    end

    phi = nothing
    n_ion = nothing
    upar_ion = nothing
    ppar_ion = nothing
    f_ion = nothing
    n_neutral = nothing
    upar_neutral = nothing
    ppar_neutral = nothing
    f_neutral = nothing
    z, z_spectral = nothing, nothing
    vpa, vpa_spectral = nothing, nothing

    if global_rank[] == 0
        quietoutput() do

            # Load and analyse output
            #########################

            path = joinpath(realpath(input["output"]["base_directory"]), name)

            # open the output file(s)
            run_info = get_run_info_no_setup(path; dfns=true)

            # load species, time coordinate data
            n_ion_species = run_info.composition.n_ion_species
            n_neutral_species = run_info.composition.n_neutral_species
            ntime = run_info.nt
            time = run_info.time
            
            # load fields data
            phi_zrt = postproc_load_variable(run_info, "phi")
            Er_zrt = postproc_load_variable(run_info, "Er")
            Ez_zrt = postproc_load_variable(run_info, "Ez")

            # load velocity moments data
            n_ion_zrst = postproc_load_variable(run_info, "density")
            upar_ion_zrst = postproc_load_variable(run_info, "parallel_flow")
            ppar_ion_zrst = postproc_load_variable(run_info, "parallel_pressure")
            qpar_ion_zrst = postproc_load_variable(run_info, "parallel_heat_flux")
            v_t_ion_zrst = postproc_load_variable(run_info, "thermal_speed")
            n_neutral_zrst = postproc_load_variable(run_info, "density_neutral")
            upar_neutral_zrst = postproc_load_variable(run_info, "uz_neutral")
            ppar_neutral_zrst = postproc_load_variable(run_info, "pz_neutral")
            qpar_neutral_zrst = postproc_load_variable(run_info, "qz_neutral")
            v_t_neutral_zrst = postproc_load_variable(run_info, "thermal_speed_neutral")
            z = run_info.z
            z_spectral = run_info.z_spectral

            # load particle distribution function (pdf) data
            f_ion_vpavperpzrst = postproc_load_variable(run_info, "f")
            f_neutral_vzvrvzetazrst = postproc_load_variable(run_info, "f_neutral")
            vpa = run_info.vpa
            vpa_spectral = run_info.vpa_spectral

            close_run_info(run_info)
            
            phi = phi_zrt[:,1,:]
            n_ion = n_ion_zrst[:,1,:,:]
            upar_ion = upar_ion_zrst[:,1,:,:]
            ppar_ion = ppar_ion_zrst[:,1,:,:]
            qpar_ion = qpar_ion_zrst[:,1,:,:]
            v_t_ion = v_t_ion_zrst[:,1,:,:]
            f_ion = f_ion_vpavperpzrst[:,1,:,1,:,:]
            n_neutral = n_neutral_zrst[:,1,:,:]
            upar_neutral = upar_neutral_zrst[:,1,:,:]
            ppar_neutral = ppar_neutral_zrst[:,1,:,:]
            qpar_neutral = qpar_neutral_zrst[:,1,:,:]
            v_t_neutral = v_t_neutral_zrst[:,1,:,:]
            f_neutral = f_neutral_vzvrvzetazrst[:,1,1,:,1,:,:]

            # Unnormalize f
            if input["evolve_moments"]["density"]
                for it ∈ 1:length(time), is ∈ 1:n_ion_species, iz ∈ 1:z.n
                    f_ion[:,iz,is,it] .*= n_ion[iz,is,it]
                end
                for it ∈ 1:length(time), isn ∈ 1:n_neutral_species, iz ∈ 1:z.n
                    f_neutral[:,iz,isn,it] .*= n_neutral[iz,isn,it]
                end
            end
            if input["evolve_moments"]["pressure"]
                for it ∈ 1:length(time), is ∈ 1:n_ion_species, iz ∈ 1:z.n
                    f_ion[:,iz,is,it] ./= v_t_ion[iz,is,it]
                end
                for it ∈ 1:length(time), isn ∈ 1:n_neutral_species, iz ∈ 1:z.n
                    f_neutral[:,iz,isn,it] ./= v_t_neutral[iz,isn,it]
                end
            end
        end

        # Test against values interpolated onto 'expected' grid which is fairly coarse no we
        # do not have to save too much data in this file

        # Use commented-out lines to get the test data to put in `expected`
        #newgrid_phi = cat(interpolate_to_grid_z(expected.z, phi[:, 1], z, z_spectral),
        #                   interpolate_to_grid_z(expected.z, phi[:, 2], z, z_spectral);
        #                   dims=2)
        #println("phi ", size(newgrid_phi))
        #println(newgrid_phi)
        #println()
        #newgrid_n_ion = cat(interpolate_to_grid_z(expected.z, n_ion[:, :, 1], z, z_spectral)[:,1],
        #                        interpolate_to_grid_z(expected.z, n_ion[:, :, 2], z, z_spectral)[:,1];
        #                        dims=2)
        #println("n_ion ", size(newgrid_n_ion))
        #println(newgrid_n_ion)
        #println()
        #newgrid_n_neutral = cat(interpolate_to_grid_z(expected.z, n_neutral[:, :, 1], z, z_spectral)[:,1],
        #                        interpolate_to_grid_z(expected.z, n_neutral[:, :, 2], z, z_spectral)[:,1];
        #                        dims=2)
        #println("n_neutral ", size(newgrid_n_neutral))
        #println(newgrid_n_neutral)
        #println()
        #newgrid_upar_ion = cat(interpolate_to_grid_z(expected.z, upar_ion[:, :, 1], z, z_spectral)[:,1],
        #                           interpolate_to_grid_z(expected.z, upar_ion[:, :, 2], z, z_spectral)[:,1];
        #                           dims=2)
        #println("upar_ion ", size(newgrid_upar_ion))
        #println(newgrid_upar_ion)
        #println()
        #newgrid_upar_neutral = cat(interpolate_to_grid_z(expected.z, upar_neutral[:, :, 1], z, z_spectral)[:,1],
        #                           interpolate_to_grid_z(expected.z, upar_neutral[:, :, 2], z, z_spectral)[:,1];
        #                           dims=2)
        #println("upar_neutral ", size(newgrid_upar_neutral))
        #println(newgrid_upar_neutral)
        #println()
        #newgrid_ppar_ion = cat(interpolate_to_grid_z(expected.z, ppar_ion[:, :, 1], z, z_spectral)[:,1],
        #                           interpolate_to_grid_z(expected.z, ppar_ion[:, :, 2], z, z_spectral)[:,1];
        #                           dims=2)
        #println("ppar_ion ", size(newgrid_ppar_ion))
        #println(newgrid_ppar_ion)
        #println()
        #newgrid_ppar_neutral = cat(interpolate_to_grid_z(expected.z, ppar_neutral[:, :, 1], z, z_spectral)[:,1],
        #                           interpolate_to_grid_z(expected.z, ppar_neutral[:, :, 2], z, z_spectral)[:,1];
        #                           dims=2)
        #println("ppar_neutral ", size(newgrid_ppar_neutral))
        #println(newgrid_ppar_neutral)
        #println()
        #newgrid_vth_ion = @. sqrt(2.0/3.0*newgrid_ppar_ion/newgrid_n_ion)
        #f1 = interpolate_to_grid_z(expected.z, f_ion[:, :, :, 1], z, z_spectral)
        #f2 = interpolate_to_grid_z(expected.z, f_ion[:, :, :, 2], z, z_spectral)
        #newgrid_f_ion1 = fill(NaN, length(expected.vpa), size(f1, 2), size(f1, 3),
        #                      size(f1, 4))
        #for iz ∈ 1:length(expected.z)
        #    wpa = copy(expected.vpa)
        #    if input["evolve_moments"]["parallel_flow"]
        #        wpa .-= newgrid_upar_ion[iz,1]
        #    end
        #    if input["evolve_moments"]["pressure"]
        #        wpa ./= newgrid_vth_ion[iz,1]
        #    end
        #    newgrid_f_ion1[:,iz,1] = interpolate_to_grid_vpa(wpa, f1[:,iz,1], vpa, vpa_spectral)
        #end
        #newgrid_f_ion2 = fill(NaN, length(expected.vpa), size(f2, 2), size(f2, 3),
        #                      size(f2, 4))
        #for iz ∈ 1:length(expected.z)
        #    wpa = copy(expected.vpa)
        #    if input["evolve_moments"]["parallel_flow"]
        #        wpa .-= newgrid_upar_ion[iz,2]
        #    end
        #    if input["evolve_moments"]["pressure"]
        #        wpa ./= newgrid_vth_ion[iz,2]
        #    end
        #    newgrid_f_ion2[:,iz,1] = interpolate_to_grid_vpa(wpa, f2[:,iz,1], vpa, vpa_spectral)
        #end
        #newgrid_f_ion = cat(newgrid_f_ion1, newgrid_f_ion2; dims=3)
        #println("f_ion ", size(newgrid_f_ion))
        #println(newgrid_f_ion)
        #println()
        #newgrid_vth_neutral = @. sqrt(2.0/3.0*newgrid_ppar_neutral/newgrid_n_neutral)
        #fn1 = interpolate_to_grid_z(expected.z, f_neutral[:, :, :, 1], z, z_spectral)
        #fn2 = interpolate_to_grid_z(expected.z, f_neutral[:, :, :, 2], z, z_spectral)
        #newgrid_f_neutral1 = fill(NaN, length(expected.vpa), size(fn1, 2), size(fn1, 3),
        #                          size(fn1, 4))
        #for iz ∈ 1:length(expected.z)
        #    wpa = copy(expected.vpa)
        #    if input["evolve_moments"]["parallel_flow"]
        #        wpa .-= newgrid_upar_neutral[iz,1]
        #    end
        #    if input["evolve_moments"]["pressure"]
        #        wpa ./= newgrid_vth_neutral[iz,1]
        #    end
        #    newgrid_f_neutral1[:,iz,1] = interpolate_to_grid_vpa(wpa, fn1[:,iz,1], vpa,
        #                                                         vpa_spectral)
        #end
        #newgrid_f_neutral2 = fill(NaN, length(expected.vpa), size(fn2, 2), size(fn2, 3),
        #                          size(fn2, 4))
        #for iz ∈ 1:length(expected.z)
        #    wpa = copy(expected.vpa)
        #    if input["evolve_moments"]["parallel_flow"]
        #        wpa .-= newgrid_upar_neutral[iz,2]
        #    end
        #    if input["evolve_moments"]["pressure"]
        #        wpa ./= newgrid_vth_neutral[iz,2]
        #    end
        #    newgrid_f_neutral2[:,iz,1] = interpolate_to_grid_vpa(wpa, fn2[:,iz,1], vpa, vpa_spectral)
        #end
        #newgrid_f_neutral = cat(newgrid_f_neutral1, newgrid_f_neutral2; dims=3)
        #println("f_neutral ", size(newgrid_f_neutral))
        #println(newgrid_f_neutral)
        #println()
        function test_values(tind)
            @testset "tind=$tind" begin
                newgrid_phi = interpolate_to_grid_z(expected.z, phi[:, tind], z, z_spectral)
                @test elementwise_isapprox(expected.phi[:, tind], newgrid_phi, rtol=rtol)

                # Check ion particle moments and f
                ######################################

                newgrid_n_ion = interpolate_to_grid_z(expected.z, n_ion[:, :, tind], z, z_spectral)
                @test elementwise_isapprox(expected.n_ion[:, tind], newgrid_n_ion[:,1], rtol=rtol)

                newgrid_upar_ion = interpolate_to_grid_z(expected.z, upar_ion[:, :, tind], z, z_spectral)
                @test elementwise_isapprox(expected.upar_ion[:, tind], newgrid_upar_ion[:,1], rtol=upar_rtol, atol=atol)

                newgrid_ppar_ion = interpolate_to_grid_z(expected.z, ppar_ion[:, :, tind], z, z_spectral)
                @test elementwise_isapprox(expected.ppar_ion[:, tind], newgrid_ppar_ion[:,1], rtol=rtol)

                newgrid_vth_ion = @. sqrt(2.0/3.0*newgrid_ppar_ion/newgrid_n_ion)
                newgrid_f_ion = interpolate_to_grid_z(expected.z, f_ion[:, :, :, tind], z, z_spectral)
                temp = newgrid_f_ion
                newgrid_f_ion = fill(NaN, length(expected.vpa),
                                     size(newgrid_f_ion, 2),
                                     size(newgrid_f_ion, 3),
                                     size(newgrid_f_ion, 4))
                for iz ∈ 1:length(expected.z)
                    wpa = copy(expected.vpa)
                    if input["evolve_moments"]["parallel_flow"]
                        wpa .-= newgrid_upar_ion[iz,1]
                    end
                    if input["evolve_moments"]["pressure"]
                        wpa ./= newgrid_vth_ion[iz,1]
                    end
                    newgrid_f_ion[:,iz,1] = interpolate_to_grid_vpa(wpa, temp[:,iz,1], vpa, vpa_spectral)
                end
                @test elementwise_isapprox(expected.f_ion[:, :, tind], newgrid_f_ion[:,:,1], rtol=rtol)

                # Check neutral particle moments and f
                ######################################

                newgrid_n_neutral = interpolate_to_grid_z(expected.z, n_neutral[:, :, tind], z, z_spectral)
                @test elementwise_isapprox(expected.n_neutral[:, tind], newgrid_n_neutral[:,:,1], rtol=rtol)

                newgrid_upar_neutral = interpolate_to_grid_z(expected.z, upar_neutral[:, :, tind], z, z_spectral)
                @test elementwise_isapprox(expected.upar_neutral[:, tind], newgrid_upar_neutral[:,:,1], rtol=upar_rtol, atol=atol)

                newgrid_ppar_neutral = interpolate_to_grid_z(expected.z, ppar_neutral[:, :, tind], z, z_spectral)
                @test elementwise_isapprox(expected.ppar_neutral[:, tind], newgrid_ppar_neutral[:,:,1], rtol=rtol)

                newgrid_vth_neutral = @. sqrt(2.0/3.0*newgrid_ppar_neutral/newgrid_n_neutral)
                newgrid_f_neutral = interpolate_to_grid_z(expected.z, f_neutral[:, :, :, tind], z, z_spectral)
                temp = newgrid_f_neutral
                newgrid_f_neutral = fill(NaN, length(expected.vpa),
                                         size(newgrid_f_neutral, 2),
                                         size(newgrid_f_neutral, 3),
                                         size(newgrid_f_neutral, 4))
                for iz ∈ 1:length(expected.z)
                    wpa = copy(expected.vpa)
                    if input["evolve_moments"]["parallel_flow"]
                        wpa .-= newgrid_upar_neutral[iz,1]
                    end
                    if input["evolve_moments"]["pressure"]
                        wpa ./= newgrid_vth_neutral[iz,1]
                    end
                    newgrid_f_neutral[:,iz,1] = interpolate_to_grid_vpa(wpa, temp[:,iz,1], vpa, vpa_spectral)
                end
                @test elementwise_isapprox(expected.f_neutral[:, :, tind], newgrid_f_neutral[:,:,1], rtol=rtol)
            end
        end

        # Test initial values
        test_values(1)

        # Test final values
        test_values(2)
    end
end


function runtests()
    # Create a temporary directory for test output
    test_output_directory = get_MPI_tempdir()

    @testset "numerical dissipation" verbose=use_verbose begin
        println("numerical dissipation tests")

        # Chebyshev pseudospectral
        # Benchmark data is taken from this run (Chebyshev with no splitting)
        @testset "base" begin
            test_input["output"]["base_directory"] = test_output_directory
            run_test(test_input, expected_base, 1.e-10, 1.0e-14)
        end
        @testset "split 1" begin
            test_input_split_1_moment["output"]["base_directory"] = test_output_directory
            run_test(test_input_split_1_moment, expected_split_1, 1.e-10, 1.0e-14)
        end
        @testset "split 2" begin
            test_input_split_2_moments["output"]["base_directory"] = test_output_directory
            run_test(test_input_split_2_moments, expected_split_2, 1.e-10, 1.0e-14)
        end
        @testset "split 3" begin
            test_input_split_3_moments["output"]["base_directory"] = test_output_directory
            run_test(test_input_split_3_moments, expected_split_3, 1.e-10, 1.0e-14)
        end
    end

    if global_rank[] == 0
        # Delete output directory to avoid using too much disk space
        rm(realpath(test_output_directory); recursive=true)
    end
end

end # NumericalDissipationTests


using .NumericalDissipationTests

NumericalDissipationTests.runtests()
